import streamlit as st
import pandas as pd
from datetime import datetime, timedelta
from utils.KPIs import load_data, calculate_kpis, calculate_acquisition_retention_kpis, filter_by_date_range, kpi_card, render_kpi_block, render_plotly_glass_card
import plotly.express as px
import plotly.graph_objects as go
import numpy as np
# Importar fun√ß√µes de an√°lise NLP
from utils.nlp_analysis import analyze_reviews



# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Dashboard Olist",
    page_icon="üìä",
    layout="wide"
)

# Carregar dados para obter o per√≠odo dispon√≠vel
df = load_data()
min_date = pd.to_datetime(df['order_purchase_timestamp']).min()
max_date = pd.to_datetime(df['order_purchase_timestamp']).max()

# Sidebar
st.sidebar.title("Configura√ß√µes")

# Filtro de per√≠odo
st.sidebar.subheader("Per√≠odo de An√°lise")
periodo = st.sidebar.selectbox(
    "Selecione o per√≠odo:",
    [
        "Todo o per√≠odo",
        "√öltimo m√™s",
        "√öltimos 2 meses",
        "√öltimo trimestre",
        "√öltimo semestre",
        "√öltimo ano",
        "√öltimos 2 anos"
    ]
)

# Calcular o per√≠odo selecionado
def get_date_range(periodo):
    hoje = max_date
    if periodo == "Todo o per√≠odo":
        return None
    elif periodo == "√öltimo m√™s":
        return [hoje - timedelta(days=30), hoje]
    elif periodo == "√öltimos 2 meses":
        return [hoje - timedelta(days=60), hoje]
    elif periodo == "√öltimo trimestre":
        return [hoje - timedelta(days=90), hoje]
    elif periodo == "√öltimo semestre":
        return [hoje - timedelta(days=180), hoje]
    elif periodo == "√öltimo ano":
        return [hoje - timedelta(days=365), hoje]
    elif periodo == "√öltimos 2 anos":
        return [hoje - timedelta(days=730), hoje]

# Aplicar filtro de data
date_range = get_date_range(periodo)
filtered_df = filter_by_date_range(df, date_range)

# Filtro de gasto com marketing
st.sidebar.subheader("Total Gasto com Marketing")
marketing_spend = st.sidebar.number_input(
    "Valor (R$):",
    min_value=0,
    max_value=5000000,
    value=50000,
    step=1000,
    help="Digite o valor total gasto com marketing no per√≠odo selecionado"
)

# Navega√ß√£o
st.sidebar.markdown("---")
st.sidebar.title("Navega√ß√£o")
pagina = st.sidebar.radio(
    "Selecione a p√°gina:",
    ["Vis√£o Geral", "Aquisi√ß√£o e Reten√ß√£o", "Comportamento do Cliente",
    "Produtos e Categorias","An√°lise de Churn","An√°lise Estrat√©gica"]
)

# Fun√ß√µes auxiliares
def format_value(value, is_integer=False):
    """Formata um valor num√©rico com separador de milhares e duas casas decimais."""
    if is_integer:
        return f"{int(value):,}"
    return f"{value:,.2f}"

def format_percentage(value):
    """Formata um valor como porcentagem com duas casas decimais."""
    return f"{value*100:.2f}%"

# Exibir a p√°gina selecionada
if pagina == "Vis√£o Geral":
    st.title("Vis√£o Geral")
    kpis = calculate_kpis(filtered_df, marketing_spend, date_range)
    
    # ===== SE√á√ÉO 1: KPIs PRINCIPAIS =====
    
    
    # Preparar dicion√°rio de KPIs
    kpi_values = {
        "üí∞ Receita Total": f"R$ {format_value(kpis['total_revenue'])}",
        "üì¶ Total de Pedidos": format_value(kpis['total_orders'], is_integer=True),
        "üë• Total de Clientes": format_value(kpis['total_customers'], is_integer=True),
        "üéØ Taxa de Abandono": format_percentage(kpis['abandonment_rate']),
        "üòä Satisfa√ß√£o do Cliente": format_value(kpis['csat']),
        "üí∞ Ticket M√©dio": f"R$ {format_value(kpis['average_ticket'])}",
        "üì¶ Tempo M√©dio de Entrega": f"{int(kpis['avg_delivery_time'])} dias",
        "‚ùå Taxa de Cancelamento": format_percentage(kpis['cancellation_rate']),
        "üí∏ Receita Perdida": f"R$ {format_value(kpis['lost_revenue'])}"
    }
    
    # Renderizar bloco de KPIs com efeito glass
    render_kpi_block("üìä M√©tricas de Performance", kpi_values, cols_per_row=3)
    
    # ===== SE√á√ÉO 2: EVOLU√á√ÉO DA RECEITA =====
    
    # Gr√°fico de Receita ao Longo do Tempo
    monthly_revenue = filtered_df.groupby(filtered_df['order_purchase_timestamp'].dt.to_period('M'))['price'].sum().reset_index()
    monthly_revenue['order_purchase_timestamp'] = monthly_revenue['order_purchase_timestamp'].astype(str)
    fig_revenue = px.line(
        monthly_revenue,
        x='order_purchase_timestamp',
        y='price',
        title=" ",
        labels={'price': 'Receita (R$)', 'order_purchase_timestamp': 'M√™s'}
    )
    fig_revenue.update_layout(showlegend=False)
    
    # Renderizar o gr√°fico com efeito glass
    render_plotly_glass_card("üìà Evolu√ß√£o da Receita Mensal", fig_revenue)
    
    # Adicionar insights sobre a receita
    col1, col2 = st.columns(2)
    
    with col1:
        # Calcular crescimento da receita
        if len(monthly_revenue) >= 2:
            first_month = monthly_revenue.iloc[0]['price']
            last_month = monthly_revenue.iloc[-1]['price']
            growth_rate = (last_month - first_month) / first_month * 100 if first_month > 0 else 0
            
            st.markdown(f"""
            <div style="
                background-color: #f0f2f6;
                padding: 20px;
                border-radius: 10px;
                margin-bottom: 20px;
            ">
                <h3 style="margin-top: 0;">üìà Crescimento da Receita</h3>
                <p>De <strong>{monthly_revenue.iloc[0]['order_purchase_timestamp']}</strong> a <strong>{monthly_revenue.iloc[-1]['order_purchase_timestamp']}</strong>, 
                a receita <strong>{'aumentou' if growth_rate > 0 else 'diminuiu'}</strong> em <strong>{format_value(abs(growth_rate))}%</strong>.</p>
            </div>
            """, unsafe_allow_html=True)
    
    with col2:
        # Identificar m√™s com maior receita
        max_month = monthly_revenue.loc[monthly_revenue['price'].idxmax()]
        st.markdown(f"""
        <div style="
            background-color: #f0f2f6;
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 20px;
        ">
            <h3 style="margin-top: 0;">üèÜ Melhor M√™s</h3>
            <p>O m√™s com maior receita foi <strong>{max_month['order_purchase_timestamp']}</strong>, 
            com <strong>R$ {format_value(max_month['price'])}</strong>.</p>
        </div>
        """, unsafe_allow_html=True)
    
    # ===== SE√á√ÉO 3: SATISFA√á√ÉO E CANCELAMENTO =====
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Gr√°fico de Satisfa√ß√£o do Cliente
        monthly_satisfaction = filtered_df.groupby(filtered_df['order_purchase_timestamp'].dt.to_period('M'))['review_score'].mean().reset_index()
        monthly_satisfaction['order_purchase_timestamp'] = monthly_satisfaction['order_purchase_timestamp'].astype(str)
        fig_satisfaction = px.line(
            monthly_satisfaction,
            x='order_purchase_timestamp',
            y='review_score',
            title=" ",
            labels={'review_score': 'Nota M√©dia', 'order_purchase_timestamp': 'M√™s'}
        )
        fig_satisfaction.update_layout(
            yaxis=dict(range=[0, 5]),
            showlegend=False
        )
        
        # Renderizar gr√°fico com efeito glass
        render_plotly_glass_card("üòä Evolu√ß√£o da Satisfa√ß√£o", fig_satisfaction)
        
        # Adicionar insights sobre satisfa√ß√£o
        avg_satisfaction = filtered_df['review_score'].mean()
        satisfaction_distribution = filtered_df['review_score'].value_counts(normalize=True).sort_index()
        
        st.markdown(f"""
        <div style="
            background-color: #f0f2f6;
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 20px;
        ">
            <h3 style="margin-top: 0;">üìä Distribui√ß√£o de Avalia√ß√µes</h3>
            <p>A nota m√©dia de satisfa√ß√£o √© <strong>{format_value(avg_satisfaction)}</strong> em 5.</p>
            <p><strong>{format_percentage(satisfaction_distribution.get(5, 0))}</strong> dos clientes deram nota 5.</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        # Gr√°fico de Taxa de Cancelamento
        monthly_cancellation = filtered_df.groupby(filtered_df['order_purchase_timestamp'].dt.to_period('M'))['pedido_cancelado'].mean().reset_index()
        monthly_cancellation['order_purchase_timestamp'] = monthly_cancellation['order_purchase_timestamp'].astype(str)
        fig_cancellation = px.line(
            monthly_cancellation,
            x='order_purchase_timestamp',
            y='pedido_cancelado',
            title=" ",
            labels={'pedido_cancelado': 'Taxa de Cancelamento', 'order_purchase_timestamp': 'M√™s'}
        )
        fig_cancellation.update_layout(
            yaxis=dict(tickformat=".1%"),
            showlegend=False
        )
        
        # Renderizar gr√°fico com efeito glass
        render_plotly_glass_card("‚ùå Taxa de Cancelamento", fig_cancellation)
        
        # Adicionar insights sobre cancelamento
        avg_cancellation = filtered_df['pedido_cancelado'].mean()
        total_cancelled = filtered_df[filtered_df['pedido_cancelado'] == 1]['order_id'].nunique()
        
        st.markdown(f"""
        <div style="
            background-color: #f0f2f6;
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 20px;
        ">
            <h3 style="margin-top: 0;">‚ùå Impacto do Cancelamento</h3>
            <p>A taxa m√©dia de cancelamento √© <strong>{format_percentage(avg_cancellation)}</strong>.</p>
            <p>Foram cancelados <strong>{format_value(total_cancelled, is_integer=True)}</strong> pedidos, 
            resultando em <strong>R$ {format_value(kpis['lost_revenue'])}</strong> de receita perdida.</p>
        </div>
        """, unsafe_allow_html=True)
    
    # ===== SE√á√ÉO 4: RESUMO E INSIGHTS =====
    st.header("üí° Insights Principais")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown(f"""
        <div style="
            background-color: #f0f2f6;
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 20px;
        ">
            <h3 style="margin-top: 0;">üìä M√©tricas de Neg√≥cio</h3>
            <ul>
                <li>Receita total: <strong>R$ {format_value(kpis['total_revenue'])}</strong></li>
                <li>Ticket m√©dio: <strong>R$ {format_value(kpis['average_ticket'])}</strong></li>
                <li>Total de clientes: <strong>{format_value(kpis['total_customers'], is_integer=True)}</strong></li>
                <li>Total de pedidos: <strong>{format_value(kpis['total_orders'], is_integer=True)}</strong></li>
            </ul>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown(f"""
        <div style="
            background-color: #f0f2f6;
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 20px;
        ">
            <h3 style="margin-top: 0;">üéØ Oportunidades de Melhoria</h3>
            <ul>
                <li>Reduzir taxa de cancelamento (atual: <strong>{format_percentage(kpis['cancellation_rate'])}</strong>)</li>
                <li>Melhorar tempo de entrega (atual: <strong>{int(kpis['avg_delivery_time'])} dias</strong>)</li>
                <li>Aumentar satisfa√ß√£o do cliente (atual: <strong>{format_value(kpis['csat'])}</strong>)</li>
                <li>Reduzir taxa de abandono (atual: <strong>{format_percentage(kpis['abandonment_rate'])}</strong>)</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)

elif pagina == "An√°lise Estrat√©gica":
    st.title("An√°lise Estrat√©gica")
    kpis = calculate_kpis(filtered_df, marketing_spend, date_range)
    
    # ===== SE√á√ÉO 1: VIS√ÉO GERAL E KPIs PRINCIPAIS =====
    # Preparar dicion√°rio de KPIs principais
    main_kpis = {
        "üí∞ Receita Total": f"R$ {format_value(kpis['total_revenue'])}",
        "üìà Ticket M√©dio": f"R$ {format_value(kpis['average_ticket'])}",
        "üë• Total de Clientes": format_value(kpis['total_customers'], is_integer=True)
    }
    
    # Renderizar bloco de KPIs principais com efeito glass
    render_kpi_block("üìä M√©tricas Principais", main_kpis, cols_per_row=3)
    
    # ===== SE√á√ÉO 2: PREVIS√ÉO DE RECEITA =====
    st.header("üîÆ Previs√£o de Receita")
    
    # Preparar dados para an√°lise
    filtered_df['month'] = pd.to_datetime(filtered_df['order_purchase_timestamp']).dt.to_period('M')
    monthly_category_sales = filtered_df.groupby(['month', 'product_category_name']).agg({
        'price': 'sum',
        'order_id': 'count',
        'pedido_cancelado': 'mean'
    }).reset_index()
    monthly_category_sales['month'] = monthly_category_sales['month'].astype(str)
    
    # Identificar as 5 categorias com maior volume de vendas
    top_categories = filtered_df.groupby('product_category_name')['order_id'].count().sort_values(ascending=False).head(5).index.tolist()
    
    # Filtrar apenas as categorias principais
    top_category_sales = monthly_category_sales[monthly_category_sales['product_category_name'].isin(top_categories)]
    
    # Calcular m√©dia di√°ria de receita
    filtered_df['date'] = pd.to_datetime(filtered_df['order_purchase_timestamp']).dt.date
    daily_revenue = filtered_df.groupby('date')['price'].sum().reset_index()
    
    # Adicionar dia da semana para an√°lise de sazonalidade
    daily_revenue['day_of_week'] = pd.to_datetime(daily_revenue['date']).dt.day_name()
    
    # Calcular m√©dia m√≥vel de 7 dias
    daily_revenue['ma7'] = daily_revenue['price'].rolling(window=7).mean()
    
    # Calcular fatores de sazonalidade semanal
    day_order = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
    weekly_seasonality = daily_revenue.groupby('day_of_week')['price'].mean().reindex(day_order)
    weekly_seasonality = weekly_seasonality / weekly_seasonality.mean()  # Normalizar
    
    # Calcular tend√™ncia de crescimento (√∫ltimos 30 dias)
    recent_data = daily_revenue.tail(30)
    if len(recent_data) >= 2:
        x = np.arange(len(recent_data))
        y = recent_data['price'].values
        z = np.polyfit(x, y, 1)
        growth_rate = z[0]  # Coeficiente de crescimento di√°rio
    else:
        growth_rate = 0
    
    # Calcular previs√£o para os pr√≥ximos 30 dias
    last_date = daily_revenue['date'].iloc[-1]
    forecast_dates = pd.date_range(start=last_date, periods=31, freq='D')[1:]
    
    # Criar DataFrame para previs√£o
    forecast_df = pd.DataFrame({'date': forecast_dates})
    forecast_df['day_of_week'] = forecast_df['date'].dt.day_name()
    
    # Aplicar fatores de sazonalidade
    forecast_df['seasonality_factor'] = forecast_df['day_of_week'].map(weekly_seasonality)
    
    # Calcular previs√£o base
    base_forecast = daily_revenue['ma7'].iloc[-1]
    
    # Aplicar tend√™ncia de crescimento e sazonalidade
    for i in range(len(forecast_df)):
        days_ahead = i + 1
        forecast_df.loc[i, 'forecast'] = base_forecast * forecast_df.loc[i, 'seasonality_factor'] + (growth_rate * days_ahead)
    
    # Calcular intervalo de confian√ßa (simplificado)
    std_dev = daily_revenue['price'].std()
    forecast_df['lower_bound'] = forecast_df['forecast'] - (1.96 * std_dev)
    forecast_df['upper_bound'] = forecast_df['forecast'] + (1.96 * std_dev)
    
    # Calcular m√©tricas de previs√£o
    total_forecast = forecast_df['forecast'].sum()
    previous_30_days = daily_revenue.tail(30)['price'].sum()
    growth_percentage = (total_forecast - previous_30_days) / previous_30_days * 100 if previous_30_days > 0 else 0
    max_day = forecast_df.loc[forecast_df['forecast'].idxmax()]
    
    # Preparar dicion√°rio de KPIs de previs√£o
    forecast_kpis = {
        "üí∞ Receita Total Prevista (30 dias)": f"R$ {format_value(total_forecast)}",
        "üìà Crescimento Previsto": f"{format_value(growth_percentage)}%",
        "üìÖ Dia com Maior Receita Prevista": f"{max_day['date'].strftime('%d/%m/%Y')} ({max_day['day_of_week']})"
    }
    
    # Renderizar bloco de KPIs de previs√£o com efeito glass
    render_kpi_block("üìä M√©tricas de Previs√£o", forecast_kpis, cols_per_row=3)
    
    # Criar gr√°fico de previs√£o
    fig_forecast = go.Figure()
    
    # Adicionar dados hist√≥ricos
    fig_forecast.add_trace(go.Scatter(
        x=daily_revenue['date'],
        y=daily_revenue['price'],
        name='Receita Hist√≥rica',
        line=dict(
            width=2,
            color='#1f77b4'
        ),
        mode='lines+markers',
        marker=dict(
            size=6,
            symbol='circle'
        )
    ))
    
    # Adicionar previs√£o
    fig_forecast.add_trace(go.Scatter(
        x=forecast_df['date'],
        y=forecast_df['forecast'],
        name='Previs√£o',
        line=dict(
            width=2,
            color='#ff7f0e',
            dash='dash'
        ),
        mode='lines+markers',
        marker=dict(
            size=6,
            symbol='diamond'
        )
    ))
    
    # Adicionar intervalo de confian√ßa
    fig_forecast.add_trace(go.Scatter(
        x=forecast_df['date'].tolist() + forecast_df['date'].tolist()[::-1],
        y=forecast_df['upper_bound'].tolist() + forecast_df['lower_bound'].tolist()[::-1],
        fill='toself',
        fillcolor='rgba(255, 127, 14, 0.2)',
        line=dict(color='rgba(255, 127, 14, 0)'),
        name='Intervalo de Confian√ßa'
    ))
    
    fig_forecast.update_layout(
        title="",
        xaxis_title="Data",
        yaxis_title="Receita (R$)",
        showlegend=True,
        legend=dict(
            orientation="h",
            yanchor="bottom",
            y=1.02,
            xanchor="right",
            x=1,
            font=dict(size=12)
        ),
        hovermode='x unified',
        hoverlabel=dict(
            bgcolor="white",
            font_size=12,
            font_family="Rockwell"
        )
    )
    fig_forecast.update_layout(dragmode=False, hovermode=False)
    
    # Renderizar gr√°fico com efeito glass
    render_plotly_glass_card("üîÆ Evolu√ß√£o e Previs√£o de Receita", fig_forecast)
    
    # ===== SE√á√ÉO 3: SAZONALIDADE E PADR√ïES DE VENDA =====
    st.header("üìÖ Sazonalidade e Padr√µes de Venda")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Sazonalidade de Vendas
        st.subheader("üìÖ Sazonalidade de Vendas")
        
        # Calcular vendas por dia da semana
        filtered_df['day_of_week'] = pd.to_datetime(filtered_df['order_purchase_timestamp']).dt.day_name()
        day_order = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
        day_revenue = filtered_df.groupby('day_of_week')['price'].sum().reindex(day_order)
        
        # Calcular vendas por m√™s
        filtered_df['month'] = pd.to_datetime(filtered_df['order_purchase_timestamp']).dt.month_name()
        month_order = ['January', 'February', 'March', 'April', 'May', 'June', 
                      'July', 'August', 'September', 'October', 'November', 'December']
        month_revenue = filtered_df.groupby('month')['price'].sum().reindex(month_order)
        
        # Criar gr√°fico de sazonalidade
        fig_seasonality = go.Figure()
        
        # Adicionar barras para dia da semana
        fig_seasonality.add_trace(go.Bar(
            x=day_revenue.index,
            y=day_revenue.values,
            name='Por Dia da Semana',
            marker_color='#1f77b4'
        ))
        
        # Adicionar barras para m√™s
        fig_seasonality.add_trace(go.Bar(
            x=month_revenue.index,
            y=month_revenue.values,
            name='Por M√™s',
            marker_color='#ff7f0e',
            visible=False
        ))
        
        # Adicionar bot√µes para alternar entre visualiza√ß√µes
        fig_seasonality.update_layout(
            title="Sazonalidade de Vendas",
            xaxis_title="Per√≠odo",
            yaxis_title="Receita (R$)",
            updatemenus=[
                dict(
                    type="buttons",
                    direction="down",
                    buttons=[
                        dict(
                            args=[{"visible": [True, False]}],
                            label="Por Dia da Semana",
                            method="update"
                        ),
                        dict(
                            args=[{"visible": [False, True]}],
                            label="Por M√™s",
                            method="update"
                        )
                    ],
                    x=0.1,
                    y=1.1
                )
            ],
            showlegend=False
        )
        fig_seasonality.update_layout(dragmode=False, hovermode=False)
        
        # Renderizar gr√°fico com efeito glass
        render_plotly_glass_card("üìÖ Sazonalidade de Vendas", fig_seasonality)
        
        # Identificar o dia da semana com maior receita
        best_day = day_revenue.idxmax()
        best_day_revenue = day_revenue.max()
        
        # Identificar o m√™s com maior receita
        best_month = month_revenue.idxmax()
        best_month_revenue = month_revenue.max()
        
        st.markdown(f"""
        **Insights de Sazonalidade:**
        - **Melhor dia para vendas**: {best_day} (R$ {format_value(best_day_revenue)})
        - **Melhor m√™s para vendas**: {best_month} (R$ {format_value(best_month_revenue)})
        """)
    
    with col2:
        # Ticket M√©dio por Perfil
        st.subheader("üíµ Ticket M√©dio por Estado")
        
        # Calcular ticket m√©dio por estado
        state_ticket = filtered_df.groupby('customer_state')['price'].mean().sort_values(ascending=False)
        
        # Criar gr√°fico de ticket m√©dio
        fig_ticket = go.Figure()
        
        fig_ticket.add_trace(go.Bar(
            x=state_ticket.index,
            y=state_ticket.values,
            name='Ticket M√©dio',
            marker_color='#1f77b4'
        ))
        
        fig_ticket.update_layout(
            title="Ticket M√©dio por Estado",
            xaxis_title="Estado",
            yaxis_title="Ticket M√©dio (R$)",
            showlegend=False
        )
        fig_ticket.update_layout(dragmode=False, hovermode=False)
        
        # Renderizar gr√°fico com efeito glass
        render_plotly_glass_card("üíµ Ticket M√©dio por Estado", fig_ticket)
        
        # Identificar o estado com maior ticket m√©dio
        best_state = state_ticket.idxmax()
        best_state_ticket = state_ticket.max()
        
        st.markdown(f"""
        **Insights de Ticket M√©dio:**
        - **Estado com maior ticket m√©dio**: {best_state} (R$ {format_value(best_state_ticket)})
        """)
    
    # ===== SE√á√ÉO 4: RENTABILIDADE E AN√ÅLISE DE CATEGORIAS =====
    st.header("üí∞ Rentabilidade e An√°lise de Categorias")
    
    # Preparar dados para an√°lise
    filtered_df['month'] = pd.to_datetime(filtered_df['order_purchase_timestamp']).dt.to_period('M')
    monthly_category_sales = filtered_df.groupby(['month', 'product_category_name']).agg({
        'price': 'sum',
        'order_id': 'count',
        'pedido_cancelado': 'mean'
    }).reset_index()
    monthly_category_sales['month'] = monthly_category_sales['month'].astype(str)
    
    # Identificar as 5 categorias com maior volume de vendas
    top_categories = filtered_df.groupby('product_category_name')['order_id'].count().sort_values(ascending=False).head(5).index.tolist()
    
    # Filtrar apenas as categorias principais
    top_category_sales = monthly_category_sales[monthly_category_sales['product_category_name'].isin(top_categories)]
    
    # Layout em duas colunas para os gr√°ficos
    col1, col2 = st.columns(2)
    
    with col1:
        # Top 10 Categorias por Rentabilidade
        st.subheader("üìà Top 10 Categorias por Rentabilidade")
        
        # Calcular rentabilidade por categoria
        category_profit = filtered_df.groupby('product_category_name').agg({
            'price': 'sum',
            'order_id': 'count'
        }).reset_index()
        
        category_profit['avg_price'] = category_profit['price'] / category_profit['order_id']
        category_profit['profit_margin'] = 0.3  # Simulando margem de 30%
        category_profit['profit'] = category_profit['price'] * category_profit['profit_margin']
        
        # Ordenar por lucro
        category_profit = category_profit.sort_values('profit', ascending=False).head(10)
        
        # Identificar a categoria mais rent√°vel
        best_category = category_profit.iloc[0]['product_category_name']
        best_category_profit = category_profit.iloc[0]['profit']
        
        # Criar gr√°fico de rentabilidade
        fig_profit = go.Figure()
        
        fig_profit.add_trace(go.Bar(
            x=category_profit['product_category_name'],
            y=category_profit['profit'],
            name='Lucro',
            marker_color='#2ca02c'
        ))
        
        fig_profit.update_layout(
            xaxis_title="Categoria",
            yaxis_title="Lucro (R$)",
            showlegend=False,
            xaxis_tickangle=45
        )
        fig_profit.update_layout(dragmode=False, hovermode=False)
        
        # Renderizar gr√°fico com efeito glass
        render_plotly_glass_card("üìà Top 10 Categorias por Rentabilidade", fig_profit)
    
    with col2:
        # Taxa de Crescimento por Categoria
        st.subheader("üìä Taxa de Crescimento por Categoria")
        
        # Calcular taxa de crescimento para cada categoria
        category_growth = {}
        for category in top_categories:
            category_data = top_category_sales[top_category_sales['product_category_name'] == category]
            if len(category_data) >= 2:
                first_month = category_data.iloc[0]['order_id']
                last_month = category_data.iloc[-1]['order_id']
                growth_rate = (last_month - first_month) / first_month * 100 if first_month > 0 else 0
                category_growth[category] = growth_rate
        
        # Ordenar categorias por taxa de crescimento
        sorted_categories = sorted(category_growth.items(), key=lambda x: x[1], reverse=True)
        
        # Criar gr√°fico de barras para taxa de crescimento
        fig_growth = go.Figure()
        
        fig_growth.add_trace(go.Bar(
            x=[cat[0] for cat in sorted_categories],
            y=[cat[1] for cat in sorted_categories],
            name='Taxa de Crescimento',
            marker_color='#2ca02c'
        ))
        
        fig_growth.update_layout(
            xaxis_title="Categoria",
            yaxis_title="Taxa de Crescimento (%)",
            showlegend=False
        )
        fig_growth.update_layout(dragmode=False, hovermode=False)
        
        # Renderizar gr√°fico com efeito glass
        render_plotly_glass_card("üìä Taxa de Crescimento por Categoria", fig_growth)
    
    # ===== SE√á√ÉO 5: PREVIS√ÉO DE DEMANDA POR CATEGORIA =====
    st.header("üìà Previs√£o de Demanda por Categoria")
    
    # Identificar as 5 categorias com maior volume de vendas
    top_categories = filtered_df.groupby('product_category_name')['order_id'].count().sort_values(ascending=False).head(5).index.tolist()
    
    # Criar DataFrame para previs√£o
    last_month = pd.to_datetime(monthly_category_sales['month'].iloc[-1])
    forecast_months = pd.date_range(start=last_month, periods=4, freq='M')[1:]
    
    # Calcular previs√£o para cada categoria
    forecast_data = []
    
    for category in top_categories:
        category_data = top_category_sales[top_category_sales['product_category_name'] == category]
        
        if len(category_data) >= 3:
            # Calcular m√©dia m√≥vel de 3 meses
            ma3 = category_data['order_id'].rolling(window=3).mean().iloc[-1]
            
            # Calcular tend√™ncia (√∫ltimos 3 meses)
            recent_data = category_data.tail(3)
            x = np.arange(len(recent_data))
            y = recent_data['order_id'].values
            z = np.polyfit(x, y, 1)
            trend = z[0]  # Coeficiente de crescimento mensal
            
            # Calcular previs√£o para os pr√≥ximos 3 meses
            for i, month in enumerate(forecast_months):
                forecast = ma3 + (trend * (i + 1))
                forecast_data.append({
                    'month': month,
                    'product_category_name': category,
                    'forecast': max(0, forecast)  # Garantir que a previs√£o n√£o seja negativa
                })
    
    forecast_df = pd.DataFrame(forecast_data)
    
    # Criar gr√°fico de previs√£o
    fig_forecast = go.Figure()
    
    # Definir paleta de cores para as categorias
    category_colors = {
        'historical': [
            '#1f77b4',  # Azul
            '#ff7f0e',  # Laranja
            '#2ca02c',  # Verde
            '#d62728',  # Vermelho
            '#9467bd',  # Roxo
            '#8c564b',  # Marrom
            '#e377c2',  # Rosa
            '#7f7f7f',  # Cinza
            '#bcbd22',  # Verde-amarelo
            '#17becf'   # Ciano
        ],
        'forecast': [
            '#1f77b4',  # Azul (mais claro)
            '#ff7f0e',  # Laranja (mais claro)
            '#2ca02c',  # Verde (mais claro)
            '#d62728',  # Vermelho (mais claro)
            '#9467bd',  # Roxo (mais claro)
            '#8c564b',  # Marrom (mais claro)
            '#e377c2',  # Rosa (mais claro)
            '#7f7f7f',  # Cinza (mais claro)
            '#bcbd22',  # Verde-amarelo (mais claro)
            '#17becf'   # Ciano (mais claro)
        ]
    }
    
    # Adicionar dados hist√≥ricos
    for i, category in enumerate(top_categories):
        category_data = top_category_sales[top_category_sales['product_category_name'] == category]
        fig_forecast.add_trace(go.Scatter(
            x=category_data['month'],
            y=category_data['order_id'],
            name=f'{category} (Hist√≥rico)',
            line=dict(
                width=2,
                color=category_colors['historical'][i % len(category_colors['historical'])]
            ),
            mode='lines+markers',
            marker=dict(
                size=6,
                symbol='circle'
            )
        ))
    
    # Adicionar previs√£o
    for i, category in enumerate(top_categories):
        category_forecast = forecast_df[forecast_df['product_category_name'] == category]
        if not category_forecast.empty:
            fig_forecast.add_trace(go.Scatter(
                x=category_forecast['month'],
                y=category_forecast['forecast'],
                name=f'{category} (Previs√£o)',
                line=dict(
                    width=2,
                    color=category_colors['forecast'][i % len(category_colors['forecast'])],
                    dash='dash'
                ),
                mode='lines+markers',
                marker=dict(
                    size=6,
                    symbol='diamond'
                )
            ))
    
    fig_forecast.update_layout(
        title="",
        xaxis_title="M√™s",
        yaxis_title="Quantidade de Pedidos",
        showlegend=True,
        legend=dict(
            orientation="h",
            yanchor="bottom",
            y=1.02,
            xanchor="right",
            x=1,
            font=dict(size=12)
        ),
        hovermode='x unified',
        hoverlabel=dict(
            bgcolor="white",
            font_size=12,
            font_family="Rockwell"
        )
    )
    fig_forecast.update_layout(dragmode=False, hovermode=False)
    
    # Renderizar gr√°fico com efeito glass
    render_plotly_glass_card("üìà Previs√£o de Demanda por Categoria", fig_forecast)
    
    # ===== SE√á√ÉO 6: RECOMENDA√á√ïES E INSIGHTS =====
    st.header("üí° Recomenda√ß√µes e Insights")
    
    # Calcular m√©tricas avan√ßadas para recomenda√ß√µes
    recommendations = []
    
    # Definir limites m√≠nimos
    MIN_MONTHLY_ORDERS = 10  # M√≠nimo de pedidos mensais para an√°lise
    MIN_TOTAL_REVENUE = 5000  # M√≠nimo de receita total para an√°lise
    
    for category in top_categories:
        category_data = top_category_sales[top_category_sales['product_category_name'] == category]
        category_revenue = filtered_df[filtered_df['product_category_name'] == category]['price'].sum()
        avg_monthly_orders = category_data['order_id'].mean()
        
        # Verificar volumes m√≠nimos
        if avg_monthly_orders >= MIN_MONTHLY_ORDERS and category_revenue >= MIN_TOTAL_REVENUE:
            if not category_data.empty and not category_forecast.empty:
                # Calcular m√©tricas de tend√™ncia
                last_month_sales = category_data.iloc[-1]['order_id']
                next_month_forecast = category_forecast.iloc[0]['forecast']
                
                # Calcular varia√ß√£o percentual
                variation = (next_month_forecast - last_month_sales) / last_month_sales * 100 if last_month_sales > 0 else 0
                
                # Calcular giro de estoque (simulado)
                inventory_turnover = avg_monthly_orders / 30  # M√©dia di√°ria de vendas
                
                # Calcular estoque ideal baseado na previs√£o e lead time
                lead_time_days = 15  # Tempo m√©dio de reposi√ß√£o em dias
                safety_stock_days = 7  # Estoque de seguran√ßa em dias
                ideal_stock = (next_month_forecast / 30) * (lead_time_days + safety_stock_days)
                
                # Determinar a√ß√£o baseada em m√∫ltiplos fatores
                if variation > 20 and inventory_turnover > 1:
                    action = "Aumentar significativamente"
                    reason = "Alto crescimento previsto com bom giro de estoque"
                elif variation > 10 and inventory_turnover > 0.5:
                    action = "Aumentar moderadamente"
                    reason = "Crescimento moderado com giro adequado"
                elif variation < -20 and inventory_turnover < 0.3:
                    action = "Reduzir significativamente"
                    reason = "Queda significativa nas vendas e baixo giro"
                elif variation < -10 and inventory_turnover < 0.5:
                    action = "Reduzir moderadamente"
                    reason = "Queda moderada nas vendas"
                else:
                    action = "Manter"
                    reason = "Demanda est√°vel"
                
                recommendations.append({
                    'category': category,
                    'variation': variation,
                    'action': action,
                    'reason': reason,
                    'ideal_stock': ideal_stock,
                    'inventory_turnover': inventory_turnover
                })
    
    # Ordenar recomenda√ß√µes por varia√ß√£o absoluta
    recommendations.sort(key=lambda x: abs(x['variation']), reverse=True)
    
    # Exibir recomenda√ß√µes em um formato mais visual
    st.subheader("üì¶ Recomenda√ß√µes de Estoque")
    
    # Criar colunas para as recomenda√ß√µes
    rec_cols = st.columns(3)
    
    for i, rec in enumerate(recommendations):
        col_idx = i % 3
        with rec_cols[col_idx]:
            # Definir cor de fundo com base na varia√ß√£o
            bg_color = "rgba(46, 204, 113, 0.2)" if rec['variation'] > 0 else "rgba(231, 76, 60, 0.2)" if rec['variation'] < 0 else "rgba(52, 152, 219, 0.2)"
            
            # Definir cor do texto com base na varia√ß√£o
            text_color = "#2ecc71" if rec['variation'] > 0 else "#e74c3c" if rec['variation'] < 0 else "#3498db"
            
            st.markdown(f"""
            <div style="
                backdrop-filter: blur(10px);
                background: {bg_color};
                border-radius: 20px;
                padding: 30px;
                margin: 10px 0;
                border: 1px solid {text_color};
                box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1);
                color: #333;
                text-align: center;
            ">
                <h3 style="margin: 0; color: {text_color};">{rec['category']}</h3>
                <h1 style="margin: 10px 0; color: {text_color};">{rec['action']}</h1>
                <p style="opacity: 0.8; margin: 0;">Varia√ß√£o prevista: {format_value(rec['variation'])}%</p>
                <p style="opacity: 0.8; margin: 5px 0;">Giro de estoque: {format_value(rec['inventory_turnover'])} un/dia</p>
                <p style="opacity: 0.8; margin: 5px 0;">Estoque ideal: {format_value(rec['ideal_stock'], is_integer=True)} un</p>
                <p style="font-size: 0.9em; margin-top: 10px; font-style: italic;">{rec['reason']}</p>
            </div>
            """, unsafe_allow_html=True)
    
    # Resumo dos insights principais
    st.subheader("üìä Resumo dos Insights Principais")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown(f"""
        **Insights de Receita:**
        - **Receita Total**: R$ {format_value(kpis['total_revenue'])}
        - **Crescimento Previsto**: {format_value(growth_percentage)}%
        - **Melhor dia para vendas**: {best_day}
        - **Melhor m√™s para vendas**: {best_month}
        """)
    
    with col2:
        st.markdown(f"""
        **Insights de Produtos:**
        - **Categoria mais rent√°vel**: {best_category} (Lucro: R$ {format_value(best_category_profit)})
        - **Estado com maior ticket m√©dio**: {best_state} (R$ {format_value(state_ticket.max() if 'state_ticket' in locals() else 0)})
        - **Categoria com maior crescimento**: {sorted_categories[0][0] if sorted_categories else "N/A"} ({format_value(sorted_categories[0][1] if sorted_categories else 0)}%)
        """)

elif pagina == "Aquisi√ß√£o e Reten√ß√£o":
    st.title("Aquisi√ß√£o e Reten√ß√£o")
    kpis = calculate_kpis(filtered_df, marketing_spend, date_range)
    acquisition_kpis = calculate_acquisition_retention_kpis(filtered_df, marketing_spend, date_range)
    
    # üìä M√©tricas
    
    # Preparar dicion√°rio de KPIs de Clientes
    customer_kpis = {
        "üë• Novos Clientes (Per√≠odo)": format_value(acquisition_kpis['total_new_customers'], is_integer=True),
        "üîÑ Taxa de Recompra": format_percentage(acquisition_kpis['repurchase_rate']),
        "‚è≥ Tempo at√© 2¬™ Compra": f"{int(acquisition_kpis['avg_time_to_second'])} dias"
    }
    
    # Renderizar bloco de KPIs de Clientes com efeito glass
    render_kpi_block("üë• M√©tricas de Clientes", customer_kpis, cols_per_row=3)
    
    # Preparar dicion√°rio de KPIs Financeiros
    financial_kpis = {
        "üí∞ CAC": f"R$ {format_value(acquisition_kpis['cac'])}",
        "üìà LTV": f"R$ {format_value(acquisition_kpis['ltv'])}",
        "‚öñÔ∏è LTV/CAC": format_value(acquisition_kpis['ltv'] / acquisition_kpis['cac'] if acquisition_kpis['cac'] > 0 else 0)
    }
    
    # Renderizar bloco de KPIs Financeiros com efeito glass
    render_kpi_block("üí∞ M√©tricas Financeiras", financial_kpis, cols_per_row=3)
    
    st.markdown("---")
    
    # üìà An√°lise LTV/CAC
    st.header("üìà An√°lise LTV/CAC")
    
    # Calcular LTV e CAC por m√™s
    monthly_metrics = filtered_df.groupby(filtered_df['order_purchase_timestamp'].dt.to_period('M')).agg({
        'price': 'sum',
        'customer_unique_id': 'nunique',
        'pedido_cancelado': 'sum'
    }).reset_index()
    
    monthly_metrics['order_purchase_timestamp'] = monthly_metrics['order_purchase_timestamp'].astype(str)
    monthly_metrics['monthly_revenue'] = monthly_metrics['price'] - (monthly_metrics['price'] * monthly_metrics['pedido_cancelado'])
    
    # Separar c√°lculo do LTV da visualiza√ß√£o
    monthly_metrics['monthly_ltv_raw'] = monthly_metrics['monthly_revenue'] / monthly_metrics['customer_unique_id']
    monthly_metrics['monthly_ltv'] = -monthly_metrics['monthly_ltv_raw']  # s√≥ para visualiza√ß√£o
    monthly_metrics['monthly_cac'] = marketing_spend / 12
    
    # Calcular raz√£o LTV/CAC usando o valor real (positivo)
    monthly_metrics['ltv_cac_ratio'] = monthly_metrics['monthly_ltv_raw'] / monthly_metrics['monthly_cac']
    
    # Status atual usando valores reais
    current_ltv = acquisition_kpis['ltv']  # j√° vem positivo
    current_cac = acquisition_kpis['cac']
    current_ratio = current_ltv / current_cac if current_cac > 0 else 0
    
    # Determinar status e cor
    if current_ratio < 1:
        status = "üö® Cr√≠tico"
        status_color = "#dc3545"
    elif current_ratio == 1:
        status = "‚ö†Ô∏è Limite"
        status_color = "#ffc107"
    elif current_ratio < 3:
        status = "üò¨ Razo√°vel"
        status_color = "#17a2b8"
    elif current_ratio == 3:
        status = "‚úÖ Ideal"
        status_color = "#28a745"
    else:
        status = "üí∞ Alto"
        status_color = "#007bff"
    
    # Determinar cor do texto baseado no tema
    is_dark_theme = st.get_option("theme.base") == "dark"
    text_color = "rgba(255,255,255,0.9)" if is_dark_theme else "rgba(0,0,0,0.9)"
    
    # Gr√°fico de Evolu√ß√£o LTV vs CAC
    fig_comparison = go.Figure()
    
    # Adicionar dados hist√≥ricos com anota√ß√£o explicativa
    fig_comparison.add_trace(go.Scatter(
        x=monthly_metrics['order_purchase_timestamp'],
        y=monthly_metrics['monthly_ltv'],
        name='LTV (sinal invertido para visualiza√ß√£o)',
        fill='tozeroy',
        line=dict(color='rgba(46, 204, 113, 0.3)'),
        fillcolor='rgba(46, 204, 113, 0.3)'
    ))
    
    fig_comparison.add_trace(go.Scatter(
        x=monthly_metrics['order_purchase_timestamp'],
        y=monthly_metrics['monthly_cac'],
        name='CAC',
        fill='tozeroy',
        line=dict(color='rgba(231, 76, 60, 0.3)'),
        fillcolor='rgba(231, 76, 60, 0.3)'
    ))
    
    fig_comparison.add_trace(go.Scatter(
        x=monthly_metrics['order_purchase_timestamp'],
        y=monthly_metrics['ltv_cac_ratio'],
        name='Raz√£o LTV/CAC',
        line=dict(color='#2c3e50', width=2),
        yaxis='y2'
    ))
    
    # Adicionar anota√ß√£o explicativa
    fig_comparison.add_annotation(
        x=0.5,
        y=1.1,
        xref="paper",
        yref="paper",
        text="Nota: O LTV est√° representado com sinal invertido apenas para facilitar a visualiza√ß√£o no gr√°fico",
        showarrow=False,
        font=dict(size=12, color="#666")
    )
    
    fig_comparison.update_layout(
        showlegend=True,
        yaxis2=dict(
            title="Raz√£o LTV/CAC",
            overlaying="y",
            side="right",
            showgrid=False
        ),
        legend=dict(
            orientation="h",
            yanchor="bottom",
            y=1.02,
            xanchor="right",
            x=1
        )
    )
    
    # Renderizar gr√°fico com efeito glass
    render_plotly_glass_card("üìà Evolu√ß√£o LTV vs CAC ao Longo do Tempo", fig_comparison)
    
    # An√°lise de tend√™ncia din√¢mica
    if len(monthly_metrics) >= 2:
        # Calcular per√≠odo analisado
        start_date = pd.to_datetime(monthly_metrics['order_purchase_timestamp'].iloc[0])
        end_date = pd.to_datetime(monthly_metrics['order_purchase_timestamp'].iloc[-1])
        meses_filtrados = ((end_date.year - start_date.year) * 12 + end_date.month - start_date.month) + 1
        
        # Calcular m√©dias para diferentes per√≠odos
        n_months = min(3, len(monthly_metrics))
        recent_ratio = monthly_metrics['ltv_cac_ratio'].tail(n_months).mean()
        older_ratio = monthly_metrics['ltv_cac_ratio'].head(n_months).mean()
        
        # Calcular varia√ß√£o percentual
        delta_percent = ((recent_ratio - older_ratio) / abs(older_ratio)) * 100 if older_ratio != 0 else 0
        
        # Determinar dire√ß√£o da tend√™ncia e √≠cone
        if abs(delta_percent) < 1:
            trend_icon = "‚û°Ô∏è"
            trend_color = "#808080"
            trend_text = "est√°vel"
        elif delta_percent > 0:
            trend_icon = "‚¨ÜÔ∏è"
            trend_color = "#28a745"
            trend_text = "crescimento"
        else:
            trend_icon = "‚¨áÔ∏è"
            trend_color = "#dc3545"
            trend_text = "queda"
        
        # Criar texto de per√≠odo baseado no filtro
        if periodo == "Todo o per√≠odo":
            periodo_texto = "no per√≠odo total"
        elif periodo == "√öltimo m√™s":
            periodo_texto = "no √∫ltimo m√™s"
        elif periodo == "√öltimos 2 meses":
            periodo_texto = "nos √∫ltimos 2 meses"
        elif periodo == "√öltimo trimestre":
            periodo_texto = "no √∫ltimo trimestre"
        elif periodo == "√öltimo semestre":
            periodo_texto = "no √∫ltimo semestre"
        elif periodo == "√öltimo ano":
            periodo_texto = "no √∫ltimo ano"
        elif periodo == "√öltimos 2 anos":
            periodo_texto = "nos √∫ltimos 2 anos"
        
        # Layout para Status e An√°lise de Tend√™ncia
        col1, col2 = st.columns(2)
        
        with col1:
            # Status Card
            st.markdown(f"""
            <div style="
                backdrop-filter: blur(10px);
                background: rgba(255, 255, 255, 0.08);
                border-radius: 20px;
                padding: 25px;
                margin: 20px 0;
                border: 1px solid {status_color};
                box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1);
                color: {text_color};
                text-align: center;
            ">
                <h3 style="margin-top: 0; color: {text_color};">Status Atual</h3>
                <p style="font-size: 24px; font-weight: bold; color: {status_color};">{status}</p>
                <p style="font-size: 18px;">Raz√£o LTV/CAC: {format_value(current_ratio)}</p>
            </div>
            """, unsafe_allow_html=True)
            
            # A√ß√µes Recomendadas com efeito glass
            if current_ratio < 1:
                recommendations = [
                    ("üìâ Reduzir o CAC", "Otimize suas campanhas de marketing para reduzir o custo de aquisi√ß√£o"),
                    ("üìà Aumentar o LTV", "Implemente estrat√©gias de upselling e cross-selling"),
                    ("üí∞ Revisar modelo", "Avalie se o pre√ßo dos produtos/servi√ßos est√° adequado")
                ]
                rec_color = "#e74c3c"  # Vermelho para situa√ß√£o cr√≠tica
                rec_icon = "üö®"
                rec_status = "Situa√ß√£o Cr√≠tica"
            elif current_ratio < 3:
                recommendations = [
                    ("üîç Testar novos canais", "Explore canais com potencial de menor CAC"),
                    ("üîÑ Melhorar reten√ß√£o", "Implemente programas de fidelidade para aumentar o LTV"),
                    ("‚ö° Otimizar funil", "Identifique e corrija gargalos no processo de aquisi√ß√£o")
                ]
                rec_color = "#f1c40f"  # Amarelo para situa√ß√£o de aten√ß√£o
                rec_icon = "‚ö†Ô∏è"
                rec_status = "Necessita Aten√ß√£o"
            elif current_ratio > 5:
                recommendations = [
                    ("üìà Aumentar marketing", "Voc√™ pode estar subinvestindo em crescimento"),
                    ("üåç Expandir mercados", "Aproveite a efici√™ncia atual para escalar o neg√≥cio"),
                    ("üîÑ Diversificar canais", "Explore novos canais para manter a efici√™ncia")
                ]
                rec_color = "#3498db"  # Azul para oportunidade de crescimento
                rec_icon = "üí∞"
                rec_status = "Oportunidade de Crescimento"
            else:
                recommendations = [
                    ("‚öñÔ∏è Manter equil√≠brio", "Continue monitorando a raz√£o LTV/CAC"),
                    ("üìä Testar aumentos", "Experimente aumentar o investimento em marketing"),
                    ("üîç Otimizar processos", "Foque em melhorias incrementais")
                ]
                rec_color = "#2ecc71"  # Verde para situa√ß√£o saud√°vel
                rec_icon = "‚úÖ"
                rec_status = "Situa√ß√£o Saud√°vel"
            
            # Generate recommendations HTML as a separate string
            recs_html = ""
            for title, desc in recommendations:
                recs_html += (
                    f"<li style='margin-bottom: 15px;'>"
                    f"<strong style='color: {rec_color};'>{title}:</strong> "
                    f"<span style='color: {text_color};'>{desc}</span>"
                    f"</li>"
                )
            
            # Build the recommendations block with minimal f-string interpolation
            recommendations_block = (
                "<div style='"
                "backdrop-filter: blur(10px);"
                "background: rgba(255,255,255,0.08);"
                "border-radius: 20px;"
                "padding: 25px;"
                "margin: 30px 0;"
                f"border: 1px solid {rec_color};"
                f"box-shadow: 0 4px 20px rgba(0,0,0,0.1);"
                f"color: {text_color};"
                "'>"
                "<div style='"
                "display: flex;"
                "align-items: center;"
                "margin-bottom: 20px;"
                "padding-bottom: 15px;"
                f"border-bottom: 1px solid {rec_color};"
                "'>"
                f"<h3 style='margin: 0; color: {text_color};'>üéØ A√ß√µes Recomendadas</h3>"
                f"<div style='margin-left: auto; padding: 5px 12px; background: rgba({rec_color.replace('#', '')}, 0.1); border-radius: 15px; border: 1px solid {rec_color};'>"
                f"<span style='color: {rec_color};'>{rec_icon} {rec_status}</span>"
                "</div></div>"
                "<ul style='font-size: 1.1em; padding-left: 20px; line-height: 1.7; margin: 0;'>"
                f"{recs_html}"
                "</ul></div>"
            )
            
            st.markdown(recommendations_block, unsafe_allow_html=True)
        
        with col2:
            # Passo 1: Criar a tabela do guia como string separada
            guide_table = """
            <div style="margin-top: 20px; padding-top: 20px; border-top: 1px solid rgba(255,255,255,0.2);">
                <h3 style="margin-top: 0;">üìã Guia de Interpreta√ß√£o: LTV/CAC</h3>
                <table style="width: 100%; border-collapse: collapse; font-size: 1.05em;">
                    <thead>
                        <tr style="border-bottom: 1px solid rgba(255,255,255,0.3);">
                            <th align="left">Faixa</th>
                            <th align="left">Interpreta√ß√£o</th>
                            <th align="left">Situa√ß√£o</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr><td>&lt; 1</td><td>Voc√™ perde dinheiro por cliente</td><td style="color: #e74c3c;">üö® Ruim</td></tr>
                        <tr><td>= 1</td><td>Voc√™ empata</td><td style="color: #f39c12;">‚ö†Ô∏è Limite</td></tr>
                        <tr><td>1 &lt; x &lt; 3</td><td>Lucro baixo</td><td style="color: #f1c40f;">üò¨ Razo√°vel</td></tr>
                        <tr><td>= 3</td><td>Ponto ideal (cl√°ssico)</td><td style="color: #2ecc71;">‚úÖ Saud√°vel</td></tr>
                        <tr><td>&gt; 3</td><td>Lucro alto</td><td style="color: #3498db;">üí∞ Excelente</td></tr>
                    </tbody>
                </table>
            </div>
            """
            
            # Passo 2: Montar o bloco de tend√™ncia como string segura
            trend_card = f"""
            <div style="
                backdrop-filter: blur(10px);
                background: rgba(255, 255, 255, 0.08);
                border-radius: 20px;
                padding: 25px;
                margin: 20px 0;
                border: 1px solid rgba(255,255,255,0.3);
                box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1);
                color: {text_color};
            ">
                <div style="display: flex; justify-content: space-between; margin-bottom: 20px;">
                    <div style="flex: 1; padding-right: 20px; border-right: 1px solid rgba(255,255,255,0.2);">
                        <h3 style="margin-top: 0;">üìà An√°lise de Tend√™ncia</h3>
                        <p style="font-size: 1.1em;">{trend_icon} A raz√£o LTV/CAC est√° em <strong style='color:{trend_color};'>{trend_text}</strong></p>
                        <p style="font-size: 1.1em;">Varia√ß√£o de <strong>{delta_percent:+.1f}%</strong> {periodo_texto}</p>
                    </div>
                    <div style="flex: 1; padding-left: 20px;">
                        <h3 style="margin-top: 0;">üìä Detalhamento da An√°lise</h3>
                        <ul style="list-style-type: none; padding-left: 0; margin: 0;">
                            <li style="margin: 8px 0;">üìÖ Per√≠odo analisado: <strong>{start_date.strftime('%b/%Y')} a {end_date.strftime('%b/%Y')}</strong></li>
                            <li style="margin: 8px 0;">üìâ LTV/CAC m√©dio per√≠odo inicial: <strong>{format_value(older_ratio)}</strong></li>
                            <li style="margin: 8px 0;">üìà LTV/CAC m√©dio per√≠odo recente: <strong>{format_value(recent_ratio)}</strong></li>
                            <li style="margin: 8px 0;">üìä Meses considerados por per√≠odo: <strong>{n_months}</strong></li>
                        </ul>
                    </div>
                </div>
                {guide_table}
            </div>
            """
            
            # Passo 3: Renderizar no Streamlit
            st.markdown(trend_card, unsafe_allow_html=True)
    else:
        st.warning("‚ö†Ô∏è Per√≠odo insuficiente para an√°lise de tend√™ncia (m√≠nimo 2 meses)")
    
    st.markdown("---")
    
    # üìà An√°lise de Aquisi√ß√£o
    st.header("üìà An√°lise de Aquisi√ß√£o")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Gr√°fico de Novos vs Retornando
        fig_customers = go.Figure()
        
        fig_customers.add_trace(go.Bar(
            x=acquisition_kpis['new_customers']['month'],
            y=acquisition_kpis['new_customers']['customer_unique_id'],
            name='Novos Clientes',
            marker_color='#1f77b4'
        ))
        
        fig_customers.add_trace(go.Bar(
            x=acquisition_kpis['returning_customers']['month'],
            y=acquisition_kpis['returning_customers']['customer_unique_id'],
            name='Clientes Retornando',
            marker_color='#2ca02c'
        ))
        
        fig_customers.update_layout(
            title=" ",
            barmode='stack',
            showlegend=True,
            legend=dict(
                orientation="h",
                yanchor="bottom",
                y=1.02,
                xanchor="right",
                x=1
            )
        )
        
        # Renderizar gr√°fico com efeito glass
        render_plotly_glass_card("üë• Evolu√ß√£o de Clientes", fig_customers)
    
    with col2:
        # Funil de Status dos Pedidos
        funnel_df = filtered_df.sort_values('order_purchase_timestamp')
        
        # Calcular quantidade de pedidos em cada etapa
        funnel_counts = {
            'created': len(funnel_df),
            'approved': len(funnel_df[funnel_df['order_status'].isin(['approved', 'shipped', 'delivered'])]),
            'shipped': len(funnel_df[funnel_df['order_status'].isin(['shipped', 'delivered'])]),
            'delivered': len(funnel_df[funnel_df['order_status'] == 'delivered'])
        }
        
        # Criar DataFrame para o funil
        funnel_data = pd.DataFrame({
            'status': list(funnel_counts.keys()),
            'count': list(funnel_counts.values())
        })
        
        # Definir labels em portugu√™s
        status_labels = {
            'created': 'Pedidos Criados',
            'approved': 'Pedidos Aprovados',
            'shipped': 'Pedidos Enviados',
            'delivered': 'Pedidos Entregues'
        }
        
        funnel_data['status_label'] = funnel_data['status'].map(status_labels)
        
        # Criar gr√°fico de funil
        fig_funnel = go.Figure(go.Funnel(
            y=funnel_data['status_label'],
            x=funnel_data['count'],
            textinfo="value+percent initial",
            textposition="inside",
            marker=dict(color=["#1f77b4", "#2ca02c", "#ff7f0e", "#9467bd"])
        ))
        
        fig_funnel.update_layout(
            title=" ",
            showlegend=False
        )
        
        # Renderizar gr√°fico com efeito glass
        render_plotly_glass_card("üîÑ Funil de Pedidos", fig_funnel)
        
        # Calcular taxas de convers√£o entre etapas
        conversion_rates = {
            'created_to_approved': (funnel_counts['approved'] / funnel_counts['created']) * 100,
            'approved_to_shipped': (funnel_counts['shipped'] / funnel_counts['approved']) * 100,
            'shipped_to_delivered': (funnel_counts['delivered'] / funnel_counts['shipped']) * 100
        }
        
        # Determinar status e √≠cones baseados nas taxas
        def get_status_icon(rate):
            if rate >= 95:
                return "üü¢"  # Verde para alta convers√£o
            elif rate >= 85:
                return "üü°"  # Amarelo para convers√£o m√©dia
            else:
                return "üî¥"  # Vermelho para baixa convers√£o
        
        # Criar se√ß√£o de convers√£o com efeito glass
        conversion_section = f"""
        <div style="
            backdrop-filter: blur(10px);
            background: rgba(255, 255, 255, 0.08);
            border-radius: 20px;
            padding: 25px;
            margin: 30px 0;
            border: 1px solid rgba(255, 255, 255, 0.3);
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
            color: {text_color};
        ">
            <h3 style="margin-top: 0;color: {text_color};">üîÑ Taxa de Convers√£o entre Etapas</h3>
            <ul style="font-size: 1.1em;color: {text_color}; padding-left: 20px;">
                <li>{get_status_icon(conversion_rates['created_to_approved'])} <strong>Pedidos Criados ‚Üí Aprovados:</strong> {conversion_rates['created_to_approved']:.1f}%</li>
                <li>{get_status_icon(conversion_rates['approved_to_shipped'])} <strong>Pedidos Aprovados ‚Üí Enviados:</strong> {conversion_rates['approved_to_shipped']:.1f}%</li>
                <li>{get_status_icon(conversion_rates['shipped_to_delivered'])} <strong>Pedidos Enviados ‚Üí Entregues:</strong> {conversion_rates['shipped_to_delivered']:.1f}%</li>
            </ul>
            <div style="
                margin-top: 20px;
                background: rgba(0, 255, 100, 0.1);
                padding: 15px;
                border-left: 4px solid #00ff66;
                border-radius: 10px;
                font-size: 1.05em;
                color: {text_color};
            ">
                üí° <strong>Insight:</strong> {
                    'Funil de pedidos operando com <strong>taxas saud√°veis</strong> de convers√£o.'
                    if all(rate >= 95 for rate in conversion_rates.values())
                    else 'Oportunidades de melhoria identificadas nas taxas de convers√£o.'
                }
            </div>
        </div>
        """
        
        st.markdown(conversion_section, unsafe_allow_html=True)

elif pagina == "Comportamento do Cliente":
    st.title("Comportamento do Cliente")
    kpis = calculate_kpis(filtered_df, marketing_spend, date_range)
    acquisition_kpis = calculate_acquisition_retention_kpis(filtered_df, marketing_spend, date_range)
    
    # ===== SE√á√ÉO 1: VIS√ÉO GERAL =====
    # Preparar dicion√°rio de KPIs de Cliente
    customer_kpis = {
        "üéØ Taxa de Abandono": format_percentage(kpis['abandonment_rate']),
        "üòä Satisfa√ß√£o do Cliente": format_value(kpis['csat']),
        "üîÑ Taxa de Recompra": format_percentage(acquisition_kpis['repurchase_rate'])
    }
    
    # Renderizar bloco de KPIs de Cliente com efeito glass
    render_kpi_block("üë• M√©tricas de Cliente", customer_kpis, cols_per_row=3)
    
    # Preparar dicion√°rio de KPIs de Tempo
    time_kpis = {
        "üì¶ Tempo M√©dio de Entrega": f"{int(kpis['avg_delivery_time'])} dias",
        "‚è≥ Tempo at√© 2¬™ Compra": f"{int(acquisition_kpis['avg_time_to_second'])} dias",
        "üí∞ Ticket M√©dio": f"R$ {format_value(kpis['average_ticket'])}"
    }
    
    # Renderizar bloco de KPIs de Tempo com efeito glass
    render_kpi_block("‚è±Ô∏è M√©tricas de Tempo", time_kpis, cols_per_row=3)
    
    st.markdown("---")
    
    # ===== SE√á√ÉO 2: SATISFA√á√ÉO DO CLIENTE =====
    st.header("üòä Satisfa√ß√£o do Cliente")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Gr√°fico de Satisfa√ß√£o do Cliente ao Longo do Tempo
        satisfaction_data = filtered_df.groupby(filtered_df['order_purchase_timestamp'].dt.to_period('M'))['review_score'].mean().reset_index()
        satisfaction_data['order_purchase_timestamp'] = satisfaction_data['order_purchase_timestamp'].astype(str)
        fig_satisfaction = px.line(
            satisfaction_data,
            x='order_purchase_timestamp',
            y='review_score',
            title=" ",
            labels={'review_score': 'Nota M√©dia', 'order_purchase_timestamp': 'M√™s'}
        )
        fig_satisfaction.update_layout(
            yaxis=dict(range=[0, 5]),
            showlegend=False
        )
        
        # Renderizar gr√°fico com efeito glass
        render_plotly_glass_card("üìà Evolu√ß√£o da Satisfa√ß√£o", fig_satisfaction)
        
        # Insights sobre satisfa√ß√£o
        avg_satisfaction = filtered_df['review_score'].mean()
        satisfaction_distribution = filtered_df['review_score'].value_counts(normalize=True).sort_index()
        
        st.markdown(f"""
        <div style="
            background-color: #f0f2f6;
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 20px;
        ">
            <h3 style="margin-top: 0;">üìä Distribui√ß√£o de Avalia√ß√µes</h3>
            <p>A nota m√©dia de satisfa√ß√£o √© <strong>{format_value(avg_satisfaction)}</strong> em 5.</p>
            <p><strong>{format_percentage(satisfaction_distribution.get(5, 0))}</strong> dos clientes deram nota 5.</p>
            <p><strong>{format_percentage(satisfaction_distribution.get(1, 0))}</strong> dos clientes deram nota 1.</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        # Gr√°fico de Distribui√ß√£o de Satisfa√ß√£o
        fig_dist = px.histogram(
            filtered_df,
            x='review_score',
            title=" ",
            labels={'review_score': 'Nota', 'count': 'Quantidade de Avalia√ß√µes'}
        )
        fig_dist.update_layout(
            xaxis=dict(range=[0, 5]),
            showlegend=False
        )
        
        # Renderizar gr√°fico com efeito glass
        render_plotly_glass_card("üìä Distribui√ß√£o de Satisfa√ß√£o", fig_dist)
        
        # An√°lise de correla√ß√£o entre satisfa√ß√£o e outras m√©tricas
        st.markdown(f"""
        <div style="
            background-color: #f0f2f6;
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 20px;
        ">
            <h3 style="margin-top: 0;">üîç Correla√ß√µes</h3>
            <p>Analisando a rela√ß√£o entre satisfa√ß√£o e outras m√©tricas:</p>
            <ul>
                <li>Clientes mais satisfeitos tendem a ter um ticket m√©dio <strong>{'maior' if filtered_df.groupby('review_score')['price'].mean().corr(pd.Series([1,2,3,4,5])) > 0 else 'menor'}</strong></li>
                <li>Clientes com notas mais baixas t√™m uma taxa de recompra <strong>{'menor' if filtered_df.groupby('review_score')['customer_unique_id'].nunique().corr(pd.Series([1,2,3,4,5])) > 0 else 'maior'}</strong></li>
            </ul>
        </div>
        """, unsafe_allow_html=True)
    
    st.markdown("---")
    
    # ===== SE√á√ÉO 3: AN√ÅLISE DE TEXTOS DAS AVALIA√á√ïES =====
    st.header("üìù An√°lise de Textos das Avalia√ß√µes")
    
    # Realizar an√°lise NLP
    nlp_results = analyze_reviews(filtered_df)
    
    # Exibir wordclouds em tr√™s colunas
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.subheader("‚òÄÔ∏è Avalia√ß√µes Positivas")
        st.pyplot(nlp_results['positive_wordcloud'])
        
        st.markdown("**Palavras mais frequentes:**")
        for word, freq in nlp_results['positive_freq'].items():
            st.markdown(f"- {word}: {freq} ocorr√™ncias")
        
        st.markdown("**Principais t√≥picos (LDA):**")
        for topic in nlp_results['positive_topics_lda']:
            st.markdown(f"- {topic}")
        
        st.markdown("**Padr√µes encontrados:**")
        for category, count in nlp_results['sentiment_patterns']['positive'].items():
            st.markdown(f"- {category.title()}: {count} men√ß√µes")
    
    with col2:
        st.subheader("‚öñÔ∏è Avalia√ß√µes Neutras")
        st.pyplot(nlp_results['neutral_wordcloud'])
        
        st.markdown("**Palavras mais frequentes:**")
        for word, freq in nlp_results['neutral_freq'].items():
            st.markdown(f"- {word}: {freq} ocorr√™ncias")
        
        st.markdown("**Principais t√≥picos (LDA):**")
        for topic in nlp_results['neutral_topics_lda']:
            st.markdown(f"- {topic}")
        
        st.markdown("**Padr√µes encontrados:**")
        for category, count in nlp_results['sentiment_patterns']['neutral'].items():
            st.markdown(f"- {category.title()}: {count} men√ß√µes")
    
    with col3:
        st.subheader("üåßÔ∏è Avalia√ß√µes Negativas")
        st.pyplot(nlp_results['negative_wordcloud'])
        
        st.markdown("**Palavras mais frequentes:**")
        for word, freq in nlp_results['negative_freq'].items():
            st.markdown(f"- {word}: {freq} ocorr√™ncias")
        
        st.markdown("**Principais t√≥picos (LDA):**")
        for topic in nlp_results['negative_topics_lda']:
            st.markdown(f"- {topic}")
    
        st.markdown("**Padr√µes encontrados:**")
        for category, count in nlp_results['sentiment_patterns']['negative'].items():
            st.markdown(f"- {category.title()}: {count} men√ß√µes")
    
    # M√©tricas gerais
    st.markdown("---")
    
    # Preparar dicion√°rio de KPIs de An√°lise de Texto
    text_analysis_kpis = {
        "üìä Total de Avalia√ß√µes Positivas": nlp_results['metrics']['positive_count'],
        "üìä Total de Avalia√ß√µes Neutras": nlp_results['metrics']['neutral_count'],
        "üìä Total de Avalia√ß√µes Negativas": nlp_results['metrics']['negative_count']
    }
    
    # Renderizar bloco de KPIs de An√°lise de Texto com efeito glass
    render_kpi_block("üìä M√©tricas Gerais", text_analysis_kpis, cols_per_row=3)
    
    # Preparar dicion√°rio de KPIs de Tamanho M√©dio
    length_kpis = {
        "üìè Tamanho M√©dio (Positivas)": f"{int(nlp_results['metrics']['avg_positive_length'])} caracteres",
        "üìè Tamanho M√©dio (Neutras)": f"{int(nlp_results['metrics']['avg_neutral_length'])} caracteres",
        "üìè Tamanho M√©dio (Negativas)": f"{int(nlp_results['metrics']['avg_negative_length'])} caracteres"
    }
    
    # Renderizar bloco de KPIs de Tamanho M√©dio com efeito glass
    render_kpi_block("üìè Tamanho M√©dio das Avalia√ß√µes", length_kpis, cols_per_row=3)
    
    # Propor√ß√µes
    st.markdown("---")
    
    total_reviews = (nlp_results['metrics']['positive_count'] + 
                    nlp_results['metrics']['neutral_count'] + 
                    nlp_results['metrics']['negative_count'])
    
    # Preparar dicion√°rio de KPIs de Propor√ß√µes
    proportion_kpis = {
        "üìà Propor√ß√£o Positivas": f"{(nlp_results['metrics']['positive_count'] / total_reviews):.1%}",
        "üìà Propor√ß√£o Neutras": f"{(nlp_results['metrics']['neutral_count'] / total_reviews):.1%}",
        "üìà Propor√ß√£o Negativas": f"{(nlp_results['metrics']['negative_count'] / total_reviews):.1%}"
    }
    
    # Renderizar bloco de KPIs de Propor√ß√µes com efeito glass
    render_kpi_block("üìà Distribui√ß√£o das Avalia√ß√µes", proportion_kpis, cols_per_row=3)

elif pagina == "Produtos e Categorias":
    st.title("Produtos e Categorias")
    kpis = calculate_kpis(filtered_df, marketing_spend, date_range)
    
    # Adicionar filtro de categorias
    st.sidebar.markdown("---")
    st.sidebar.header("üè∑Ô∏è Filtros de Categoria")
    
    # Obter top categorias por volume e receita
    top_by_volume = filtered_df['product_category_name'].value_counts().head(10).index.tolist()
    top_by_revenue = filtered_df.groupby('product_category_name')['price'].sum().sort_values(ascending=False).head(10).index.tolist()
    
    # Combinar e remover duplicatas mantendo a ordem
    categorias_populares = list(dict.fromkeys(top_by_volume + top_by_revenue))
    
    # Adicionar op√ß√£o "Todas as categorias" no in√≠cio
    todas_categorias = ["Todas as categorias"] + categorias_populares
    
    selected_categorias = st.sidebar.multiselect(
        "Selecione as categorias",
        todas_categorias,
        default=["Todas as categorias"],
        help="Selecione 'Todas as categorias' ou escolha categorias espec√≠ficas para an√°lise"
    )
    
    # Filtrar DataFrame baseado na sele√ß√£o
    if "Todas as categorias" not in selected_categorias:
        filtered_df = filtered_df[filtered_df['product_category_name'].isin(selected_categorias)]
    
    # Adicionar m√©tricas de contexto
    st.sidebar.markdown("---")
    st.sidebar.subheader("üìä M√©tricas das Categorias Selecionadas")
    
    # Calcular m√©tricas para as categorias selecionadas
    total_revenue = filtered_df['price'].sum()
    total_orders = filtered_df['order_id'].nunique()
    avg_ticket = total_revenue / total_orders if total_orders > 0 else 0
    
    st.sidebar.metric("Receita Total", f"R$ {format_value(total_revenue)}")
    st.sidebar.metric("Pedidos", format_value(total_orders, is_integer=True))
    st.sidebar.metric("Ticket M√©dio", f"R$ {format_value(avg_ticket)}")
    
    # üìä Vis√£o Geral
    # Preparar dicion√°rio de KPIs principais
    main_kpis = {
        "üì¶ Total de Produtos": format_value(filtered_df['product_id'].nunique(), is_integer=True),
        "üè∑Ô∏è Categorias": format_value(filtered_df['product_category_name'].nunique(), is_integer=True),
        "üí∞ Ticket M√©dio": f"R$ {format_value(avg_ticket)}",
        "üìà Receita Total": f"R$ {format_value(total_revenue)}"
    }
    
    # Renderizar bloco de KPIs principais com efeito glass
    render_kpi_block("üìä Vis√£o Geral", main_kpis, cols_per_row=4)
    
    # Adicionar informa√ß√£o sobre o filtro ativo
    if "Todas as categorias" not in selected_categorias:
        st.info(f"üìå Mostrando dados para {len(selected_categorias)} categorias selecionadas")
    
    st.markdown("---")
    
    # üìà An√°lise de Desempenho
    st.header("üìà An√°lise de Desempenho")
    
    # Primeira linha de gr√°ficos
    col1, col2 = st.columns(2)
    
    with col1:
        # Top 10 Categorias por Receita
        category_revenue = filtered_df.groupby('product_category_name')['price'].sum().sort_values(ascending=False).head(10)
        fig_category = px.bar(
            x=category_revenue.index,
            y=category_revenue.values,
            title=" ",
            labels={'x': 'Categoria', 'y': 'Receita (R$)'},
            color=category_revenue.values,
            color_continuous_scale='Viridis'
        )
        fig_category.update_layout(showlegend=False)
        
        # Renderizar gr√°fico com efeito glass
        render_plotly_glass_card("üí∞ Top 10 Categorias por Receita", fig_category)
        
        # Distribui√ß√£o de Pre√ßos por Categoria
        fig_price_dist = px.box(
            filtered_df,
            x='product_category_name',
            y='price',
            title=" ",
            labels={'price': 'Pre√ßo (R$)', 'product_category_name': 'Categoria'}
        )
        fig_price_dist.update_layout(showlegend=False)
        
        # Renderizar gr√°fico com efeito glass
        render_plotly_glass_card("üíµ Distribui√ß√£o de Pre√ßos por Categoria", fig_price_dist)
    
    with col2:
        # Top 10 Categorias por Quantidade
        category_quantity = filtered_df.groupby('product_category_name')['order_id'].count().sort_values(ascending=False).head(10)
        fig_quantity = px.bar(
            x=category_quantity.index,
            y=category_quantity.values,
            title=" ",
            labels={'x': 'Categoria', 'y': 'Quantidade de Pedidos'},
            color=category_quantity.values,
            color_continuous_scale='Viridis'
        )
        fig_quantity.update_layout(showlegend=False)
        
        # Renderizar gr√°fico com efeito glass
        render_plotly_glass_card("üì¶ Top 10 Categorias por Quantidade", fig_quantity)
        
        # Taxa de Cancelamento por Categoria
        category_cancellation = filtered_df.groupby('product_category_name')['pedido_cancelado'].mean().sort_values(ascending=False)
        fig_cancellation = px.bar(
            x=category_cancellation.index,
            y=category_cancellation.values,
            title=" ",
            labels={'x': 'Categoria', 'y': 'Taxa de Cancelamento'},
            color=category_cancellation.values,
            color_continuous_scale='Reds'
        )
        fig_cancellation.update_layout(
            yaxis=dict(tickformat=".1%"),
            showlegend=False
        )
        
        # Renderizar gr√°fico com efeito glass
        render_plotly_glass_card("‚ùå Taxa de Cancelamento por Categoria", fig_cancellation)
    
    st.markdown("---")
    
    # üîç An√°lise Detalhada
    st.header("üîç An√°lise Detalhada")
    
    # Preparar dados para an√°lise temporal
    filtered_df['month'] = pd.to_datetime(filtered_df['order_purchase_timestamp']).dt.to_period('M')
    monthly_data = filtered_df.groupby(['month', 'product_category_name']).agg({
        'price': 'sum',
        'order_id': 'count',
        'pedido_cancelado': 'mean'
    }).reset_index()
    
    # Converter Period para string para evitar problemas de serializa√ß√£o JSON
    monthly_data['month_str'] = monthly_data['month'].astype(str)
    
    # Selecionar categoria para an√°lise
    # Tratar valores None antes de ordenar
    category_options = filtered_df['product_category_name'].unique()
    category_options = [cat if cat is not None else "Categoria n√£o especificada" for cat in category_options]
    category_options = sorted(category_options)
    
    selected_category = st.selectbox(
        "Selecione uma categoria para an√°lise detalhada:",
        options=category_options
    )
    
    # Filtrar dados para a categoria selecionada
    # Se a categoria selecionada for "Categoria n√£o especificada", filtrar por None
    if selected_category == "Categoria n√£o especificada":
        category_data = monthly_data[monthly_data['product_category_name'].isna()]
    else:
        category_data = monthly_data[monthly_data['product_category_name'] == selected_category]
    
    # Gr√°ficos de an√°lise temporal
    col1, col2 = st.columns(2)
    
    with col1:
        # Evolu√ß√£o da Receita
        fig_revenue = px.line(
            category_data,
            x='month_str',
            y='price',
            title=" ",
            labels={'month_str': 'M√™s', 'price': 'Receita (R$)'}
        )
        
        # Renderizar gr√°fico com efeito glass
        render_plotly_glass_card("üí∞ Evolu√ß√£o da Receita", fig_revenue)
    
    with col2:
        # Evolu√ß√£o da Quantidade de Pedidos
        fig_orders = px.line(
            category_data,
            x='month_str',
            y='order_id',
            title=" ",
            labels={'month_str': 'M√™s', 'order_id': 'Quantidade de Pedidos'}
        )
        
        # Renderizar gr√°fico com efeito glass
        render_plotly_glass_card("üì¶ Evolu√ß√£o da Quantidade de Pedidos", fig_orders)
    
    st.markdown("---")
    
    # üí° Insights e Recomenda√ß√µes
    st.header("üí° Insights e Recomenda√ß√µes")
    
    # Calcular m√©tricas para insights
    category_metrics = filtered_df.groupby('product_category_name').agg({
        'price': ['sum', 'mean', 'std'],
        'order_id': 'count',
        'pedido_cancelado': 'mean',
        'review_score': 'mean'
    }).round(2)
    
    # Identificar categorias com melhor desempenho
    top_categories = category_metrics.nlargest(3, ('price', 'sum'))
    bottom_categories = category_metrics.nsmallest(3, ('price', 'sum'))
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Preparar dicion√°rio de KPIs para categorias em destaque
        top_category_kpis = {}
        for idx, (category, metrics) in enumerate(top_categories.iterrows(), 1):
            top_category_kpis[f"üåü {idx}. {category}"] = f"""
            <ul style="list-style-type: none; padding-left: 0; margin: 0; line-height: 1.5;">
                <li>Receita: R$ {format_value(metrics[('price', 'sum')])}</li>
                <li>Ticket: R$ {format_value(metrics[('price', 'mean')])}</li>
                <li>Pedidos: {format_value(metrics[('order_id', 'count')], is_integer=True)}</li>
                <li>Cancelamento: {format_percentage(metrics[('pedido_cancelado', 'mean')])}</li>
            </ul>
            """
        
        # Renderizar bloco de KPIs de categorias em destaque com efeito glass
        render_kpi_block("üåü Categorias em Destaque", top_category_kpis, cols_per_row=1)
    
    with col2:
        # Preparar dicion√°rio de KPIs para categorias que precisam de aten√ß√£o
        bottom_category_kpis = {}
        for idx, (category, metrics) in enumerate(bottom_categories.iterrows(), 1):
            bottom_category_kpis[f"‚ö†Ô∏è {idx}. {category}"] = f"""
            <ul style="list-style-type: none; padding-left: 0; margin: 0; line-height: 1.5;">
                <li>Receita: R$ {format_value(metrics[('price', 'sum')])}</li>
                <li>Ticket: R$ {format_value(metrics[('price', 'mean')])}</li>
                <li>Pedidos: {format_value(metrics[('order_id', 'count')], is_integer=True)}</li>
                <li>Cancelamento: {format_percentage(metrics[('pedido_cancelado', 'mean')])}</li>
            </ul>
            """
        
        # Renderizar bloco de KPIs de categorias que precisam de aten√ß√£o com efeito glass
        render_kpi_block("‚ö†Ô∏è Categorias que Precisam de Aten√ß√£o", bottom_category_kpis, cols_per_row=1)
    
    # Espa√ßo para futuras an√°lises
    st.markdown("---")
    st.header("üîÆ An√°lises Futuras")
    st.info("""
    √Årea reservada para futuras an√°lises:
    - An√°lise de sazonalidade por categoria
    - Correla√ß√£o entre pre√ßo e satisfa√ß√£o
    - An√°lise de estoque e demanda
    - Previs√£o de vendas por categoria
    """)

elif pagina == "An√°lise de Churn":
    import paginas.analise_churn
    paginas.analise_churn.app()
