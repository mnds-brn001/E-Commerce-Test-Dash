import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
import matplotlib.pyplot as plt
import seaborn as sns
import pickle
import os
from datetime import datetime
from utils.KPIs import load_data, calculate_churn_features, define_churn
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import precision_recall_curve, roc_curve, auc
from imblearn.over_sampling import SMOTE
from imblearn.under_sampling import RandomUnderSampler
import joblib
import requests
from io import BytesIO
from utils.descriptions import render_glass_card

def read_results_file(file_path):
    """
    Tenta ler o arquivo de resultados com diferentes codifica√ß√µes.
    Retorna o conte√∫do do arquivo ou None se n√£o conseguir ler.
    """
    encodings = ['utf-8', 'latin-1', 'iso-8859-1', 'cp1252']
    for encoding in encodings:
        try:
            with open(file_path, 'r', encoding=encoding) as f:
                return f.read()
        except UnicodeDecodeError:
            continue
    return None

@st.cache_resource
def load_model():
    """
    Carrega o modelo de churn. Se estiver em produ√ß√£o (Streamlit Cloud),
    baixa do storage. Se estiver local, carrega do arquivo.
    """
    try:
        if 'STREAMLIT_SHARING' in os.environ:
            # URL do seu modelo (pode ser S3, Google Drive, etc)
            if 'MODEL_URL' not in st.secrets:
                st.error("""
                ‚ö†Ô∏è URL do modelo n√£o configurada.
                
                Para usar o modelo em produ√ß√£o, voc√™ precisa:
                1. Fazer upload do modelo para um armazenamento externo (S3, Google Drive, etc.)
                2. Configurar a vari√°vel de ambiente MODEL_URL no Streamlit Cloud
                
                Por favor, acesse a aba 'Configurar An√°lise' para treinar um novo modelo.
                """)
                return None
                
            model_url = st.secrets["MODEL_URL"]
            st.info(f"üîç Tentando carregar modelo da URL: {model_url}")
            
            try:
                response = requests.get(model_url)
                response.raise_for_status()  # Verifica se houve erro na requisi√ß√£o
                st.info("‚úÖ Modelo baixado com sucesso, iniciando carregamento...")
                model = joblib.load(BytesIO(response.content))
                st.success("‚úÖ Modelo carregado com sucesso do armazenamento externo!")
                return model
            except requests.exceptions.RequestException as e:
                st.error(f"""
                ‚ö†Ô∏è Erro ao baixar o modelo: {str(e)}
                
                Verifique se:
                1. O URL do modelo est√° correto
                2. O arquivo est√° acess√≠vel
                3. A conex√£o com a internet est√° funcionando
                """)
                return None
        else:
            # Carrega localmente
            model_path = os.path.join('models', 'churn_model.pkl')
            if not os.path.exists(model_path):
                st.warning("""
                ‚ö†Ô∏è Modelo n√£o encontrado localmente.
                
                Por favor:
                1. Acesse a aba 'Configurar An√°lise'
                2. Configure os par√¢metros do modelo
                3. Treine um novo modelo
                """)
                return None
            st.info("üîç Carregando modelo local...")
            model = joblib.load(model_path)
            st.success("‚úÖ Modelo carregado com sucesso localmente!")
            return model
    except Exception as e:
        st.error(f"""
        ‚ö†Ô∏è Erro ao carregar o modelo: {str(e)}
        
        Por favor:
        1. Verifique se o arquivo do modelo est√° √≠ntegro
        2. Tente treinar um novo modelo na aba 'Configurar An√°lise'
        """)
        return None

def load_model_and_results():
    """Carrega o modelo, scaler e resultados dos arquivos"""
    try:
        # Verificar se os arquivos existem
        if not all(os.path.exists(f'models/{file}') for file in ['churn_model.pkl', 'churn_scaler.pkl', 'churn_feature_columns.pkl', 'churn_analysis_results.txt']):
            return None, None, None, None
            
        # Carregar modelo
        with open('models/churn_model.pkl', 'rb') as f:
            model = pickle.load(f)
            
        # Carregar scaler
        with open('models/churn_scaler.pkl', 'rb') as f:
            scaler = pickle.load(f)
            
        # Carregar feature columns
        with open('models/churn_feature_columns.pkl', 'rb') as f:
            feature_columns = pickle.load(f)
            
        # Carregar resultados
        with open('models/churn_analysis_results.txt', 'r', encoding='utf-8') as f:
            results = f.read()
            
        return model, scaler, feature_columns, results
    except Exception as e:
        print(f"Erro ao carregar arquivos: {str(e)}")
        return None, None, None, None

def app():
    # Configura√ß√£o da p√°gina
    #st.set_page_config(layout="wide")
    
    # Criar diret√≥rio models se n√£o existir
    if not os.path.exists('models'):
        os.makedirs('models')
        st.info("üìÅ Diret√≥rio 'models' criado com sucesso!")
    
    # T√≠tulo principal
    st.title("An√°lise de Churn")
    
    # Verificar se os arquivos necess√°rios existem
    model_files = {
        'scaler': os.path.join('models', 'churn_scaler.pkl'),
        'feature_columns': os.path.join('models', 'churn_feature_columns.pkl'),
        'results': os.path.join('models', 'churn_analysis_results.txt')
    }
    
    missing_files = [name for name, file in model_files.items() if not os.path.exists(file)]
    
    if missing_files:
        st.warning("‚ö†Ô∏è Alguns arquivos necess√°rios n√£o foram encontrados:")
        for file in missing_files:
            st.write(f"- {model_files[file]}")
        st.info("""
        Por favor, acesse a aba 'Configurar An√°lise' para treinar o modelo.
        
        O diret√≥rio 'models' foi criado automaticamente. Ap√≥s treinar o modelo,
        os arquivos ser√£o salvos neste diret√≥rio.
        """)
        return
    
    # Criar abas para diferentes se√ß√µes
    tab1, tab2, tab3, tab4 = st.tabs([
        "üìä Vis√£o Geral", 
        "‚öôÔ∏è Configurar An√°lise", 
        "üìà Resultados do Modelo", 
        "üîÆ Previs√£o"
    ])
    
    # Carregar dados
    df = load_data()
    
    # TAB 1: VIS√ÉO GERAL
    with tab1:
        # Cabe√ßalho com descri√ß√£o
        st.header("üìä Vis√£o Geral do Churn")
        
        # Layout em duas colunas para o conte√∫do principal
        col1, col2 = st.columns([2, 1])
        
        with col1:
            st.subheader("O que √© Churn?")
            render_glass_card(
                "O churn (cancelamento) √© um indicador cr√≠tico para neg√≥cios, pois indica a taxa com que os clientes \
                param de comprar ou usar os servi√ßos. Monitorar e prever o churn permite que empresas tomem medidas \
                proativas para reter clientes valiosos."
            )
            
            # Exibir distribui√ß√£o de compras ao longo do tempo
            st.subheader("üìÖ Distribui√ß√£o de Compras ao Longo do Tempo")
            
            monthly_orders = df.groupby(pd.to_datetime(df['order_purchase_timestamp']).dt.to_period('M'))['order_id'].count().reset_index()
            monthly_orders['order_purchase_timestamp'] = monthly_orders['order_purchase_timestamp'].astype(str)
            
            fig = px.line(
                monthly_orders, 
                x='order_purchase_timestamp', 
                y='order_id',
                title="N√∫mero de Pedidos por M√™s",
                labels={'order_purchase_timestamp': 'M√™s', 'order_id': 'N√∫mero de Pedidos'}
            )
            fig.update_layout(
                xaxis=dict(tickangle=45),
                yaxis=dict(title="N√∫mero de Pedidos"),
                plot_bgcolor='rgba(0,0,0,0)',
                paper_bgcolor='rgba(0,0,0,0)',
            )
            st.plotly_chart(fig, use_container_width=True)
        
        with col2:
            # Mostrar informa√ß√µes b√°sicas dos dados
            st.subheader("üìã Informa√ß√µes dos Dados")
            
            max_date = pd.to_datetime(df['order_purchase_timestamp']).max()
            min_date = pd.to_datetime(df['order_purchase_timestamp']).min()
            total_customers = df['customer_unique_id'].nunique()
            total_orders = df['order_id'].nunique()
            
            render_glass_card(
                f"<strong>Per√≠odo dos Dados:</strong> {min_date.strftime('%d/%m/%Y')} a {max_date.strftime('%d/%m/%Y')}<br>\
                <strong>Total de Clientes:</strong> {total_customers:,}<br>\
                <strong>Total de Pedidos:</strong> {total_orders:,}"
            )
            
            # Verificar se o modelo j√° foi treinado
            model_exists = os.path.exists(os.path.join('models', 'churn_model.pkl'))
            results_exist = os.path.exists(os.path.join('models', 'churn_analysis_results.txt'))
            
            if results_exist:
                try:
                    st.success("‚úÖ Um modelo de churn j√° foi treinado. Veja os resultados na aba 'Resultados do Modelo'.")
                
                # Extrair informa√ß√µes b√°sicas do arquivo de resultados
                    results_text = read_results_file(os.path.join('models', 'churn_analysis_results.txt'))
                    
                    if results_text is None:
                        st.warning("‚ö†Ô∏è N√£o foi poss√≠vel ler o arquivo de resultados. Por favor, treine o modelo novamente.")
                    else:
                # Procurar taxa de churn
                        churn_rate_line = [line for line in results_text.split('\n') if "Taxa de churn:" in line]
                    if churn_rate_line:
                        churn_rate = churn_rate_line[0].split(": ")[1]
                        st.info(f"üìä A taxa de churn atual √© de {churn_rate}")
                except Exception as e:
                    st.warning("‚ö†Ô∏è Ocorreu um erro ao ler os resultados. Por favor, treine o modelo novamente.")
            else:
                st.warning("‚ö†Ô∏è Nenhum modelo de churn foi treinado ainda. Acesse a aba 'Configurar An√°lise' para criar um modelo.")
            
            # Exemplo ilustrativo de como funciona a defini√ß√£o de churn
            st.subheader("‚ÑπÔ∏è Como Funciona a Defini√ß√£o de Churn")
            
            render_glass_card(
                "Para esta an√°lise, consideramos:<ul>\
                <li><strong>Data de corte padr√£o:</strong> 17 de abril de 2018 (6 meses antes do final dos dados)</li>\
                <li><strong>Clientes com churn (1):</strong> Aqueles que n√£o compraram ap√≥s a data de corte</li>\
                <li><strong>Clientes sem churn (0):</strong> Aqueles que compraram ap√≥s a data de corte</li>\
                </ul>"
            )

        # Exemplo ilustrativo de como funciona a defini√ß√£o de churn
        st.subheader("üìù Exemplo de Defini√ß√£o de Churn")
        
        example_data = pd.DataFrame({
            'Cliente': ['Cliente A', 'Cliente B', 'Cliente C', 'Cliente D'],
            '√öltimas Compras': [
                'Jan/2018, Mar/2018, Mai/2018, Jul/2018', 
                'Jan/2018, Fev/2018, Mar/2018',
                'Dez/2017, Fev/2018, Set/2018',
                'Nov/2017, Jan/2018, Fev/2018, Abr/2018'
            ],
            'Churn': ['N√£o', 'Sim', 'N√£o', 'Sim'],
            'Explica√ß√£o': [
                'Comprou em Julho (ap√≥s data de corte)',
                '√öltima compra em Mar√ßo (antes da data de corte)',
                'Comprou em Setembro (ap√≥s data de corte)',
                '√öltima compra em Abril (mesma data de corte, ainda √© churn)'
            ]
        })
        
        st.table(example_data)
        
        render_glass_card(
            "A data de corte padr√£o √© 17 de abril de 2018. Clientes que n√£o fizeram compras\
            ap√≥s essa data s√£o considerados como tendo abandonado (churn = 1)."
        )

    # TAB 2: CONFIGURAR AN√ÅLISE
    with tab2:
        st.header("‚öôÔ∏è Configurar An√°lise de Churn")
        
        # Layout em tr√™s colunas para melhor organiza√ß√£o
        col1, col2, col3 = st.columns([2, 1, 1])
        
        with col1:
            with st.form("churn_config_form"):
                st.subheader("üìã Par√¢metros da An√°lise")
                
                # Defini√ß√£o da data de corte
                cutoff_date = st.date_input(
                    "Data de Corte",
                    value=datetime(2018, 4, 17),
                    min_value=datetime(2017, 1, 1),
                    max_value=max_date.to_pydatetime()
                )
                
                # M√©todo de rebalanceamento
                col1_form, col2_form = st.columns(2)
                with col1_form:
                    rebalance_method = st.selectbox(
                        "M√©todo de Rebalanceamento",
                        options=["smote", "undersample", "none"],
                        help="""
                        - SMOTE: Gera exemplos sint√©ticos da classe minorit√°ria
                        - Undersample: Remove exemplos da classe majorit√°ria
                        - None: N√£o realiza rebalanceamento
                        """
                    )
                
                with col2_form:
                    class_weight = st.selectbox(
                        "Peso das Classes",
                        options=["balanced", "none"],
                        help="""
                        - Balanced: Atribui pesos inversamente proporcionais √† frequ√™ncia da classe
                        - None: Sem pesos
                        """
                    )
                
                # Tipo de modelo
                model_type = st.selectbox(
                    "Tipo de Modelo",
                    options=["random_forest", "xgboost", "logistic_regression"],
                    help="""
                    - Random Forest: Conjunto de √°rvores de decis√£o
                    - XGBoost: Implementa√ß√£o de Gradient Boosting
                    - Logistic Regression: Regress√£o log√≠stica
                    """
                )
                
                # Valida√ß√£o cruzada
                col1_form, col2_form = st.columns(2)
                with col1_form:
                    use_cv = st.number_input(
                        "N√∫mero de Folds para Valida√ß√£o Cruzada",
                        min_value=0,
                        max_value=10,
                        value=5,
                        help="0 para n√£o usar valida√ß√£o cruzada"
                    )
                
                with col2_form:
                    test_size = st.slider(
                        "Propor√ß√£o de Dados para Teste",
                        min_value=0.1,
                        max_value=0.5,
                        value=0.3,
                        step=0.05,
                        help="Porcentagem dos dados que ser√° usada para teste"
                    )
                
                # Op√ß√£o de grid search
                grid_search = st.checkbox(
                    "Realizar Grid Search",
                    value=False,
                    help="Busca exaustiva pelos melhores hiperpar√¢metros (pode demorar)"
                )
                
                # Bot√£o para executar a an√°lise
                submit_button = st.form_submit_button("üöÄ Executar An√°lise de Churn")
        
        with col2:
            st.subheader("‚ÑπÔ∏è Sobre os Par√¢metros")
            st.markdown('---')
            # Render glass card for parameters
            render_glass_card(
                "<ul>\
                <li><strong>üìÖData de Corte:</strong> Define o ponto no tempo a partir do qual consideramos que um cliente abandonou o servi√ßo.</li>\
                <li><strong>‚öñÔ∏èRebalanceamento:</strong> M√©todos para lidar com o desequil√≠brio entre classes (churn vs. n√£o-churn).</li>\
                <li><strong>ü§ñTipo de Modelo:</strong> Algoritmos de machine learning para prever o churn.</li>\
                <li><strong>üîÑValida√ß√£o Cruzada:</strong> M√©todo para avaliar a performance do modelo em diferentes subconjuntos dos dados.</li>\
                </ul>"
            )
        
        with col3:
            st.subheader("üìä Distribui√ß√£o Atual")
            st.markdown('---')
            # Calcular distribui√ß√£o atual de churn
            cutoff_date_obj = datetime.combine(cutoff_date, datetime.min.time())
            churn_df = define_churn(df, cutoff_date_obj)
            
            if 'churn' in churn_df.columns:
                churn_counts = churn_df['churn'].value_counts()
                total = churn_counts.sum()
                
                fig = go.Figure(data=[go.Pie(
                    labels=['N√£o Churn', 'Churn'],
                    values=[churn_counts.get(0, 0), churn_counts.get(1, 0)],
                    hole=.3,
                    marker_colors=['#3366CC', '#DC3912']
                )])
                
                fig.update_layout(
                    title_text=f"Baseado na data de corte<br>selecionada",
                    height=300,
                    margin=dict(t=30, b=0, l=0, r=0)
                )
                
                st.plotly_chart(fig, use_container_width=True)
                
                churn_rate = churn_counts.get(1, 0) / total * 100 if total > 0 else 0
                st.info(f"Taxa de churn atual: {churn_rate:.2f}%")
        
        if submit_button:
            # Formatar data e par√¢metros
            cutoff_date_str = cutoff_date.strftime("%Y-%m-%d")
            class_weight_param = "None" if class_weight == "none" else class_weight
            cv_param = 0 if use_cv == 0 else use_cv
            
            # Construir comando para executar o script
            grid_search_param = "--grid_search" if grid_search else ""
            
            command = f"""python churn_analysis.py \
                --cutoff_date {cutoff_date_str} \
                --rebalance {rebalance_method} \
                --model {model_type} \
                --class_weight {class_weight} \
                --cv {cv_param} \
                --test_size {test_size} \
                {grid_search_param}"""
            
            st.info(f"Executando an√°lise com o comando: `{command}`")
            
            # Aqui voc√™ pode executar o comando via subprocess, mas como estamos no Streamlit,
            # vamos apenas mostrar uma mensagem de progresso para simular a execu√ß√£o
            
            with st.spinner("Executando an√°lise de churn... (Este processo pode demorar alguns minutos)"):
                st.markdown("""
                <div style="background-color: #f0f2f6; padding: 20px; border-radius: 10px; margin-bottom: 20px;">
                    <p><strong>Nota:</strong> Em um ambiente de produ√ß√£o, este comando seria executado em segundo plano.</p>
                    <p>Para fins de demonstra√ß√£o, acesse o terminal e execute o comando acima manualmente.</p>
                </div>
                """, unsafe_allow_html=True)
                
                # Aqui voc√™ pode implementar a chamada real para o script de an√°lise
                # Por exemplo:
                # import subprocess
                # result = subprocess.run(command, shell=True, capture_output=True, text=True)
                # st.code(result.stdout)
                
                st.success("‚úÖ An√°lise conclu√≠da! Navegue para a aba 'Resultados do Modelo' para ver os resultados.")
                st.balloons()

    
    # TAB 3: RESULTADOS DO MODELO
    with tab3:
        st.header("üìà Resultados do Modelo de Churn")
        
        # Verificar se temos um modelo treinado
        model = load_model()
        if model is None:
            st.warning("""
            ‚ö†Ô∏è Nenhum modelo foi treinado ainda. Acesse a aba 'Configurar An√°lise' para criar um modelo.
            
            Enquanto isso, veja os resultados do modelo base que criamos:
            """)
            
            # Resultados do modelo base
            st.subheader("üìä Resultados do Modelo Base")
            
            # M√©tricas do modelo base
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("Acur√°cia", "0.85", "15%")
            with col2:
                st.metric("Precis√£o", "0.82", "18%")
            with col3:
                st.metric("Recall", "0.88", "12%")
            
            # Gr√°fico de import√¢ncia das features
            st.subheader("üìä Import√¢ncia das Features")
            feature_importance = pd.DataFrame({
                'Feature': ['recencia', 'frequencia', 'valor_total', 'categoria_preferida', 'avaliacao_media'],
                'Importance': [0.3, 0.25, 0.2, 0.15, 0.1]
            })
            
            fig = px.bar(
                feature_importance,
                x='Importance',
                y='Feature',
                orientation='h',
                title='Import√¢ncia das Features no Modelo Base',
                labels={'Importance': 'Import√¢ncia', 'Feature': 'Feature'}
            )
            st.plotly_chart(fig, use_container_width=True)
            
            # Curva ROC
            st.subheader("üìà Curva ROC")
            fpr = np.linspace(0, 1, 100)
            tpr = np.sqrt(fpr)
            roc_auc = 0.89
            
            fig = go.Figure()
            fig.add_trace(go.Scatter(x=fpr, y=tpr, mode='lines', name='Curva ROC'))
            fig.add_trace(go.Scatter(x=[0, 1], y=[0, 1], mode='lines', name='Linha Base', line=dict(dash='dash')))
            
            fig.update_layout(
                title=f'Curva ROC (AUC = {roc_auc:.2f})',
                xaxis_title='Taxa de Falsos Positivos',
                yaxis_title='Taxa de Verdadeiros Positivos',
                showlegend=True
            )
            st.plotly_chart(fig, use_container_width=True)
            
            # Explica√ß√£o do modelo base
            st.subheader("‚ÑπÔ∏è Sobre o Modelo Base")
            st.markdown("""
            Este √© um modelo base que criamos para demonstrar as capacidades do sistema. Ele foi treinado com:
            
            - **Dados**: Hist√≥rico de compras dos √∫ltimos 6 meses
            - **Features**:
                - Rec√™ncia da √∫ltima compra
                - Frequ√™ncia de compras
                - Valor total gasto
                - Categoria preferida
                - Avalia√ß√£o m√©dia dos produtos
            
            Para criar seu pr√≥prio modelo personalizado, acesse a aba 'Configurar An√°lise'.
            """)
            
            return
        
        # Se chegou aqui, temos um modelo treinado
        try:
            # Verificar se existe um modelo treinado
            results_path = os.path.join('models', 'churn_analysis_results.txt')
            if not os.path.exists(results_path):
                st.warning("‚ö†Ô∏è Nenhum modelo foi treinado ainda. Acesse a aba 'Configurar An√°lise' para criar um modelo.")
                return
                
            # Tentar diferentes codifica√ß√µes
            encodings = ['utf-8', 'latin-1', 'iso-8859-1', 'cp1252']
            results = None
            
            for encoding in encodings:
                try:
                    with open(results_path, 'r', encoding=encoding) as f:
                        results = f.read()
                        break
                except UnicodeDecodeError:
                    continue
            
            if results is None:
                st.error("‚ö†Ô∏è N√£o foi poss√≠vel ler o arquivo de resultados. Por favor, treine o modelo novamente.")
                return
                
            # Exibir resultados
            st.markdown(results)
            
        except Exception as e:
            st.error(f"Erro ao carregar resultados: {str(e)}")

    # TAB 4: PREVIS√ÉO
    with tab4:
        st.header("üîÆ Previs√£o de Churn")
        
        # Verificar se existe um modelo treinado
        if not os.path.exists('models/churn_model.pkl'):
            st.warning("‚ö†Ô∏è Nenhum modelo foi treinado ainda. Acesse a aba 'Configurar An√°lise' para criar um modelo.")
        else:
            # Layout em duas colunas
            col1, col2 = st.columns([2, 1])
            
            with col1:
                st.subheader("üìä Previs√£o de Churn")
                with st.form("churn_prediction_form"):
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        # Dados do Cliente
                        st.markdown("**Dados do Cliente**")
                        customer_id = st.text_input("ID do Cliente", value="", help="Digite o ID do cliente para an√°lise")
                        customer_state = st.selectbox("Estado", options=df['customer_state'].unique(), help="Selecione o estado do cliente")
                        customer_city = st.text_input("Cidade", value="", help="Digite a cidade do cliente")
                        
                        # Dados de Compras
                        st.markdown("**Dados de Compras**")
                        total_orders = st.number_input("Total de Pedidos", min_value=0, value=1, help="N√∫mero total de pedidos do cliente")
                        total_spent = st.number_input("Valor Total Gasto (R$)", min_value=0.0, value=0.0, help="Valor total gasto pelo cliente")
                        avg_ticket = st.number_input("Ticket M√©dio (R$)", min_value=0.0, value=0.0, help="Valor m√©dio dos pedidos")
                    
                    with col2:
                        # Dados de Satisfa√ß√£o
                        st.markdown("**Dados de Satisfa√ß√£o**")
                        avg_review_score = st.slider("Nota M√©dia de Avalia√ß√£o", min_value=1.0, max_value=5.0, value=3.0, step=0.1, help="Nota m√©dia das avalia√ß√µes do cliente")
                        review_count = st.number_input("N√∫mero de Avalia√ß√µes", min_value=0, value=0, help="Total de avalia√ß√µes feitas pelo cliente")
                        
                        # Dados de Tempo
                        st.markdown("**Dados de Tempo**")
                        days_since_last_purchase = st.number_input("Dias desde a √öltima Compra", min_value=0, value=0, help="N√∫mero de dias desde a √∫ltima compra")
                        avg_delivery_time = st.number_input("Tempo M√©dio de Entrega (dias)", min_value=0, value=0, help="Tempo m√©dio de entrega dos pedidos")
                    
                    # Bot√£o de previs√£o
                    predict_button = st.form_submit_button("Prever Risco de Churn")
                
                # Se o bot√£o foi pressionado, fazer a previs√£o
                if predict_button:
                    # Criar DataFrame com os dados do formul√°rio
                    input_data = pd.DataFrame({
                        'customer_state': [customer_state],
                        'total_orders': [total_orders],
                        'total_spent': [total_spent],
                        'avg_ticket': [avg_ticket],
                        'avg_review_score': [avg_review_score],
                        'review_count': [review_count],
                        'days_since_last_purchase': [days_since_last_purchase],
                        'avg_delivery_time': [avg_delivery_time]
                    })
                    
                    # Fazer a previs√£o
                    prediction = model.predict_proba(input_data)[0][1]
                    
                    # Determinar o n√≠vel de risco
                    if prediction < 0.3:
                        risk_level = "Baixo"
                        risk_color = "#2ecc71"  # Verde
                        risk_icon = "üü¢"
                    elif prediction < 0.7:
                        risk_level = "Moderado"
                        risk_color = "#f1c40f"  # Amarelo
                        risk_icon = "üü°"
                    else:
                        risk_level = "Alto"
                        risk_color = "#e74c3c"  # Vermelho
                        risk_icon = "üî¥"
                    
                    # Layout em duas colunas para resultados e recomenda√ß√µes
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        # Bloco de probabilidade com efeito glass
                        st.markdown(f"""
                        <div style='
                            backdrop-filter: blur(10px);
                            background: rgba(255,255,255,0.08);
                            border-radius: 20px;
                            padding: 25px;
                            margin: 30px 0;
                            border: 1px solid {risk_color};
                            box-shadow: 0 4px 20px rgba(0,0,0,0.1);
                            text-align: center;
                        '>
                            <h3 style="margin-top: 0;">N√≠vel de Risco</h3>
                            <div style="font-size: 24px; margin: 20px 0;">
                                {risk_icon} <strong style="color: {risk_color};">{risk_level}</strong>
                            </div>
                            <div style="font-size: 18px;">
                                Probabilidade de Churn: <strong>{prediction:.1%}</strong>
                            </div>
                        </div>
                        """, unsafe_allow_html=True)
                    
                    with col2:
                        # Bloco de recomenda√ß√µes com efeito glass
                        st.markdown(f"""
                        <div style='
                            backdrop-filter: blur(10px);
                            background: rgba(255,255,255,0.08);
                            border-radius: 20px;
                            padding: 25px;
                            margin: 30px 0;
                            border: 1px solid rgba(255,255,255,0.3);
                            box-shadow: 0 4px 20px rgba(0,0,0,0.1);
                        '>
                            <h3 style="margin-top: 0;">üéØ A√ß√µes Recomendadas</h3>
                            {alto_risco_html if risk_level == "Alto" else moderado_risco_html if risk_level == "Moderado" else baixo_risco_html}
                        </div>
                        """, unsafe_allow_html=True)

if __name__ == "__main__":
    app() 